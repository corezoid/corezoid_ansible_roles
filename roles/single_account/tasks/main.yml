---
#-------------single_account-------------#
- name: Yum clean all
  command: yum clean all
#  args:
#    warn: false
  tags:
  - single_account-all
  - single_account-app
  - single_account-install

- name: Install packages
  yum:
    name: "{{ item }}"
    state: present
    update_cache: yes
    disablerepo: "*"
    enablerepo: "aws-corezoid"
  with_items:
  - single_account-{{ corezoid_release_app_version.single_account }}
  tags:
  - single_account-all
  - single_account-app
  - single_account-install

- name: Create top folder
  file: path={{ top_dir }}/www owner=root group=root state=directory mode=0755
  tags:
  - single_account-all
  - single_account-app
  - single_account-install

- name: Create single_account_config file
  template: src=templates/{{ corezoid_release }}-{{ item }}.config.j2 dest={{ single_account_config }}
  with_items:
  - single_account
  tags:
  - single_account-all
  - single_account-app
  - single_account-config
  - single_account-config-file

- name: Fix permission to config file
  file: state=file path={{ single_account_config }} owner={{ app_user }} group={{ app_user }} mode=0600
  with_items:
  - single_account
  when: ansible_host != "127.0.0.1"
  tags:
  - single_account-all
  - single_account-app
  - single_account-config
  - single_account-config-file

- name: Setup app systemd
  template: src=templates/{{ item }}.service.j2 dest=/etc/systemd/system/{{ item }}.service owner=root group=root mode=0644
  with_items:
    - single_account
  tags:
    - single_account-all
    - single_account-app
    - single_account-initd
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7" or ansible_distribution_major_version == "8" or ansible_distribution_major_version == "9"

- name: Enable single_account to survive reboot
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
    # no_block: yes
  with_items:
    - single_account
  tags:
    - single_account-all
    - single_account-app
    - single_account-initd

- name: Create monit file
  template: src=templates/{{ item }}.monit.j2 dest=/etc/monit.d/{{ item }} owner=root group=root mode=0600
  with_items:
    - single_account
  register: monit_file
  tags:
    - single_account-all
    - single_account-app
    - single_account-monit

- name: Reload monit if config file changed
  service:
    name: monit
    state: reloaded
  when: monit_file.changed
  tags:
    - single_account-all
    - single_account-app
    - single_account-monit


#----------------NGINX---------------#
- name: Yum clean all
  command: yum clean all
#  args:
#    warn: false
  tags:
    - single_account-all
    - single_account-nginx
    - single_account-install

- name: Install packages
  yum:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - single_account_static-{{ corezoid_release_app_version.single_account_static }}
    - nginx
  tags:
    - single_account-all
    - single_account-nginx
    - single_account-install

- name: Create static folder
  file:
    path: "{{ top_dir }}/www/static"
    owner: root
    group: root
    state: directory
    mode: 0755
  tags:
    - single_account-all
    - single_account-nginx
    - single_account-nginx-install

- name: Create avatars folder
  file:
    path: "{{ top_dir }}/www/static/avatars"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    state: directory
    mode: 0755
  tags:
    - single_account-all
    - single_account-app
    - single_account-avatars-folder
    - single_account-nginx
    - single_account-nginx-configs
    - single_account-nginx-install

- name: Create symbolic for 52x52
  file:
    src: "/ebsmnt/www/static/avatars"
    dest: "/ebsmnt/www/static/avatars/52x52"
    state: link
  tags:
    - single_account-all
    - single_account-app
    - single_account-avatars-folder
    - single_account-nginx
    - single_account-nginx-symlink
    - single_account-nginx-configs
    - single_account-nginx-install

- name: Delete nGinx default configs
  file: path=/etc/nginx/conf.d/{{ item }} state=absent
  with_items:
    - "default.conf"
    - "virtual.conf"
    - "ssl.conf"
  when: first_installation_nginx == true
  tags:
    - single_account-all
    - single_account-nginx
    - single_account-nginx-install

- name: Create nGinx main configs
  template: src=templates/{{ corezoid_release }}-{{ item }}.j2 dest=/etc/nginx/conf.d/{{ item }} owner=root group=root mode=0644
  with_items:
    - "02-account.corezoid.com.conf"
  tags:
    - single_account-all
    - single_account-nginx
    - single_account-nginx-configs

- name: Create nGinx upstream configs
  template: src=templates/{{ item }}.conf.j2 dest=/etc/nginx/conf.d/{{ item }}-account.conf owner=root group=root mode=0644
  with_items:
    - "upstream"
  tags:
    - single_account-all
    - single_account-nginx
    - single_account-nginx-configs

- name: Create nGinx status configs
  template: src=templates/{{ item }}.j2 dest=/etc/nginx/conf.d/{{ item }} owner=root group=root mode=0644
  with_items:
    - "status.conf"
  tags:
    - single_account-all
    - single_account-nginx
    - single_account-nginx-configs

- name: Create nGinx ssl dir
  file: path={{ nginx_ssl_dir }} owner=root group=root state=directory mode=0755
  tags:
    - single_account-all
    - single_account-nginx
    - single_account-nginx-ssl

- name: Copy SSL certificate data
  copy:
    content: "{{ nginx_ssl_content }}"
    dest: "{{ nginx_ssl_filename }}"
    owner: "root"
    group: "root"
    mode: "0600"
  when: first_installation_nginx == true
  tags:
    - single_account-all
    - single_account-nginx
    - single_account-nginx-ssl

- name: Create nGinx ssl conf
  template: src=templates/{{ item }}.j2 dest={{ nginx_ssl_dir }}/{{ item }} owner=root group=root mode=0600
  with_items:
    - "cert-corezoid-account"
  tags:
    - single_account-all
    - single_account-nginx
    - single_account-nginx-ssl

- name: Create nGinx ssl links
  file: src={{ nginx_ssl_filename }} dest={{ nginx_ssl_dir }}/{{ item }} state=link
  with_items:
    - "corezoid.crt"
    - "corezoid.key"
  when: first_installation_nginx == true
  tags:
    - single_account-all
    - single_account-nginx
    - single_account-nginx-ssl

- name: Create logo
  copy: src=files/{{ item }} dest={{ top_dir }}/www/mw-auth/{{ item }}
  with_items:
    - "341a74d669c668e605f5a4b2fed87202.svg"
  tags:
    - single_account-all
    - single_account-nginx
    - single_account-nginx-logo


- name: Create nGinx conf
  template: src=templates/nginx.conf.j2 dest=/etc/nginx/nginx.conf owner=root group=root mode=0600
  when: first_installation_nginx == true
  tags:
    - single_account-all
    - single_account-nginx
    - single_account-nginx-mainconfig

- name: Enable nGinx to survive reboot
  service:
    name: nginx
    state: started
    enabled: yes
  tags:
    - single_account-all
    - single_account-nginx
    - single_account-nginx-system

# - name: Restart nGinx
#   service:
#     name: nginx
#     state: restarted
#   tags:
#     - single_account-all
#     - single_account-nginx
#     - single_account-nginx-restart
