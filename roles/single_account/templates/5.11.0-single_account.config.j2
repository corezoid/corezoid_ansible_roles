[

  {corezoid_license_client, [
    {path_to_license, "{{ top_dir }}/certs/{{ license_file_name }}"}
  ]},

  %% global_stats
  {corezoid_global_stats, [
    {disabled, true},
    {host, "gs.corezoid.com"},
    {port, 443},
    {send_stat_interval, 60} %% in seconds
  ]},

  {dns_cache, [
    {servers, [
{% for item in rmq_core %}
      [
          {name, {{ item.dns_cache_name }}},
          {dns, "{{ item.host }}"},
          {ttl, {{ dns_cache_ttl | default(60) }}}
      ],
{% endfor %}
      [
          {name, {{ rmq_http[0].dns_cache_name }}},
          {dns, "{{ rmq_http[0].host }}"},
          {ttl, {{ dns_cache_ttl | default(60) }}}
      ]
    ]}
  ]},

  %% for clustering components
  {corezoid_cluster, [
    {backend, redis}, %% maybe if future list will increase
    {redis, [
      {host, "{{ redis_cache[0].host }}"},
      {port, {{ redis_cache[0].port }}},
      {database, 10},
      {password, "{{ redis_cache_password | default("") }}"}
    ]}
  ]},

  {ermql, [

    {publish_request, [
      {servers, [
        [
          %%{dns_name, {{ rmq_http[0].dns_cache_name }}},
          {host, "{{ rmq_http[0].host }}"},
          {port, {{ rmq_http[0].port }}},
          {username, <<"{{ rmq_http[0].user }}">>},
          {password, <<"{{ rmq_http[0].pass }}">>},
          {vhost, <<"{{ rmq_vhost }}">>}
        ]
      ]},
      {queues_count, 1},
      {min_size, 1},
      {max_size, 1},
      {start_size, 1}
    ]},

    {consumer_response, [
      {servers, [
        [
          %%{dns_name, {{ rmq_http[0].dns_cache_name }}},
          {host, "{{ rmq_http[0].host }}"},
          {port, {{ rmq_http[0].port }}},
          {username, <<"{{ rmq_http[0].user }}">>},
          {password, <<"{{ rmq_http[0].pass }}">>},
          {vhost, <<"{{ rmq_vhost }}">>}
        ]
      ]},
      {connections_per_queue, 1},
      {channels_per_connection, 1},
      {messages_prefetch_size_per_channel, 50}
    ]}
  ]},

  {corezoid_fs, [
    {profiles, [
      %% profile name for avatars
        %% profile name for avatars
        [
            {name, avatars}, %% Storage for users avatars

            %% switch between storages
            {default_file_storage, file_f3},

            %% s3 settings
            %%{amazon_s3, [
            %%    {s3_profile, avatars},
            %%    {opts, [{acl, public_read}]},
            %%    {type, <<"role">>}, %% <<"credentials">> (by default) | <<"env">> | <<"role">>
            %%    {bucket, "{{ capi_endpoint }}-avatars"}
            %%]},

            %% f3 file storage settings
            {file_f3,[
                {allowed_namespaces, ["avatars"]},
                {path_to_dir, "{{ top_dir }}/www/static"},
                {network_partition, false},     %% Monitor network share process (if true -> grep {{ top_dir }}/www/static /proc/mounts)
                {ttl_file, 60}                 %% file ttl in seconds
            ]}
        ]
    ]}
  ]},

  {single_account,
    [

      {single_space, [
        {disabled, {{ singlespace_disabled | default("true") }}}
      ]},

      %% Auth and registration______________________________________________________________________________________________

{% if single_account_location is defined and single_account_location %}
      {base_path, "/account"},
{% endif %}
      {password_salt, <<"{{ capi_auth_hash }}">>},
      {api_secret, <<"{{ capi_api_secret }}">>},
{% if single_account_cookie_name is defined %}
      {cookie_name, <<"{{ single_account_cookie_name }}">>},
{% else %}
      {cookie_name, <<"single_account_{{ capi_main_domain }}">>},
{% endif %}
{% if single_account_location is defined and single_account_location %}
      {main_domain, "{{ capi_endpoint }}"}, %% domain for Single_Accont
{% else %}
      {main_domain, "{{ single_account_domain }}"}, %% domain for Single_Accont
{% endif %}
      %%{subdomain, ""},
      {admin_bearer_token_secret, <<"{{ single_admin_bearer_token_secret }}">>},
      {captcha, [
        {secret, <<"{{ capi_backend_settings_cpatcha_key }}">>}, %% Captcha secret
        {key, <<"{{ capi_front_captcha_key }}">>},
        {verify_url, "https://www.google.com/recaptcha/api/siteverify"},
        {disabled, {{ capi_backend_settings_cpatcha_disabled }}}
      ]},
      {initial_credentials, [
        {name, "corezoid"},
	      {redirect_uri, "https://{{ capi_endpoint }}/auth2/single_account/return/"},
	      {homepage, "https://{{ capi_endpoint }}"},
	      {logo_url, "https://corezoid.com/static/CorezoidProduct-80991adc0bc80fdda3e177ea20d188e1.png"},
	      {description, "Process engine"},
	      {notify_url, "https://{{ capi_endpoint }}/notify"},
	      {full_name, "Corezoid process engine"},
	      {capi_site_auth_single_account, {{capi_site_auth_single_account | default("true")}} } %% DEFAULT false, On/off sa authorization on corezoid
      ]},

      {email_confirm, {{ capi_email_confirm }}},
      {user_notify_conv, {{ capi.user_notify_conv | default("1") }}}, %% sending emails

      {amazon_s3, [  %% For store
        {<<"bucket">>, ""},
        {<<"key">>, ""} ,
        {<<"secret">>, ""}
      ]},

      %% OAUTH _____________________________________________________________________________________________________________
      {access_token_expire_time, 3600},
      {refresh_token_expire_time, 2592000}, %% 30 days
      {access_code_expire_time, 600},
      {register_event_process, {{ capi.register_event_process | default("1") }}}, %% for register_events
{% if capi_auth_ldap == "true" %}
      % ldap auth settings
      {ldap, [
        {server, "{{ capi_ldap_host }}"},
        {port, {{ capi_ldap_port }}}, %% port, if use tls then add {tls, true},
{% if capi_ldap_tls == true %}
        {tls, true}, %% true | false
{% endif %}
        {base, "{{ capi_ldap_base }}"}, %% ou=special users,o=middleware
        {filter, "{{ capi_ldap_filter }}"}, %% uid | cn | something_else
        {first_bind_user, {{ capi_ldap_first_bind_user }}}, %% then this param is true, bind_user_name, bind_user_pass should be filled. if it's false it is not necessary
        {bind_user_name, "{{ capi_ldap_bind_user_name }}"}, %% can be like this "cn=middleware,ou=DHO,ou=fuib,dc=fuib,dc=com"
        {bind_user_pass, "{{ capi_ldap_bind_user_pass }}"},
        {enabled, false},
        {user_nick_entry, "{{ capi_ldap_user_nick_entry }}"} %% ldap nick name path, display in right corner
      ]},
{% endif %}

      %% EXTERNALL OAUTH____________________________________________________________________________________________________
      {auth_providers, [
          {oauth2, [
            {github, [
              {name, "Github"},
              {client_id, "XXXXXXXXXXXXX"},
              {client_secret, "XXXXXXXXXXXXX"},
              {authorization_endpoint, "https://github.com/login/oauth/authorize"},
              {token_endpoint, "https://github.com/login/oauth/access_token"},
              {userinfo_endpoint, "https://api.github.com/user"},
              {scopes, ["read:user", "user:email"]},
              {userinfo_map, [
                {id, login},
                {photo, avatar_url}
              ]},
              {enabled, false}
            ]},

            {facebook, [
              {name, "Facebook"},
              {client_id, "XXXXXXXXXXXXX"},
              {client_secret, "XXXXXXXXXXXXX"},
              {authorization_endpoint, "https://www.facebook.com/v3.2/dialog/oauth"},
              {token_endpoint, "https://graph.facebook.com/v3.2/oauth/access_token"},
              {userinfo_endpoint, "https://graph.facebook.com/v3.2/me?fields=id,name,email,picture&access_token="},
              {scopes, ["public_profile", "email"]},
              {enabled, false}
            ]},

            {google, [
              {name, "Google"},
              {client_id, "XXXXXXXXXXXXX.apps.googleusercontent.com"},
              {client_secret, "XXXXXXXXXXXXX"},
              {authorization_endpoint, "https://accounts.google.com/o/oauth2/auth"},
              {token_endpoint, "https://accounts.google.com/o/oauth2/token"},
              {userinfo_endpoint, "https://www.googleapis.com/oauth2/v1/userinfo?access_token="},
              {scopes, ["profile", "email"]},
              {userinfo_map, [
                {id, email},
                {photo, picture}
              ]},
              {enabled, false}
            ]}
          ]}
      ]},

{% if capi_allowed_domains is defined %}
  %% ALLOWED DOMAINS
  {allowed_domains, [{{ capi_allowed_domains }}]},

{% endif %}

  %% SYSTEM_____________________________________________________________________________________________________________

  {api_port, {{ single_account_app_port }}},

  {pgsql, [
    {host, "{{ db_main.host }}"},
    {user, "{{ db_main.user }}"},
    {dbname, "accounts"},
    {password, "{{ db_main.pass }}"},
    {min_size, 1},
    {max_size, 10},
    {start_size, 1}
  ]},

  {redis, [
{% for item in redis_cache %}
    [
      {host, "{{ item.host }}"},
      {port, {{ item.port }}},
      {database,{{ redis_single_account_db }}},
      {password,"{{ item.password }}"},
      {start_size, 10},
      {min_size, 10},
      {max_size, 100}
{% if redis_cache.index(item) == redis_cache|length - 1 %}
    ]
{% else %}
    ],
{% endif %}
{% endfor %}
  ]}
]},

  {ermql, [
    {node_id, <<"sigle_account-{{ sigle_account_id | default(ansible_default_ipv4.address) }}">>},
    {dns_cache, [
{% for item in rmq_core %}
      [
        {name, {{ item.dns_cache_name }}},
        {dns, "{{ item.host }}"},
        {ttl, 60}
{% if rmq_core.index(item) == rmq_core|length - 1 %}
    ]
{% else %}
    ],
{% endif %}
{% endfor %}
    ]},

    {driver_type, rabbit}, %% В дальнейшем будет redis, postgre, либо другие publish subscribe клиенты

    %% RABBIT
    {rabbit_publish, [
      {servers, [
{% for item in rmq_core %}
        [
          {host, '{{ item.host }}'},
          {port, {{ item.port }}},
          {username, <<"{{ item.user }}">>},
          {password, <<"{{ item.pass }}">>},
          {vhost, <<"/conveyor">>}
{% if rmq_core.index(item) == rmq_core|length - 1 %}
        ]
{% else %}
        ],
{% endif %}
{% endfor %}
      ]},

      {min_size, 1},
      {max_size, 1},
      {start_size, 1}
    ]},

    %% consumer "settings" queue
    {rabbit_consume, [
      {servers, [
{% for item in rmq_core %}
        [
          {host, '{{ item.host }}'},
          {port, {{ item.port }}},
          {username, <<"{{ item.user }}">>},
          {password, <<"{{ item.pass }}">>},
          {vhost, <<"/conveyor">>}
{% if rmq_core.index(item) == rmq_core|length - 1 %}
        ]
{% else %}
        ],
{% endif %}
{% endfor %}
        ]},
      {connections_per_queue, 1},
      {channels_per_connection, 1},
      {messages_prefetch_size_per_channel, 50},
      {exchange, <<"sa">>},
      {routing_key, <<"key">>},
      {mfa, {mq_cache, receive_packet, [const]}} %% Функция арностью 2
    ]}
  ]},

  {corezoid_sdk, [
    {host, "https://{{ capi_endpoint }}"},
    {login_id, <<"{{ single_account_corezoid_sdk_login_id }}">>}, %% SingleAccount
    {secret_key, <<"{{ single_account_corezoid_sdk_secret_key }}">>}
  ]},

  {lager, [
    {colored, true},
    {colors, [
      {debug,     "\e[0;38m" },
      {info,      "\e[1;37m" },
      {notice,    "\e[1;36m" },
      {warning,   "\e[1;33m" },
      {error,     "\e[1;31m" },
      {critical,  "\e[1;35m" },
      {alert,     "\e[1;44m" },
      {emergency, "\e[1;41m" }
    ]},
    {crash_log, "log/crash.log"},
    {crash_log_msg_size, 65536},
    {crash_log_size, 10485760},
    {crash_log_date, "$D0"},
    {crash_log_count, 5},
    {error_logger_redirect, true},
    {error_logger_hwm, 50},
    {async_threshold, 20},
    {async_threshold_window, 5},
    {lager_truncation_size, 20000}
  ]}
].
