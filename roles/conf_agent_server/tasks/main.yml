# Set service name as a fact for consistent usage
- name: Set service name variable
  set_fact:
    service_name: "conf_agent_server"
  tags:
    - conf_agent_server-all
    - conf_agent_server-app

# Clean YUM cache to ensure fresh package metadata
# Removes all cached package data to prevent installation issues
- name: Yum clean all
  command: yum clean all
  tags:
    - conf_agent_server-all
    - conf_agent_server-app
    - conf_agent_server-install

# Install Configuration Agent Server package
# Installs or updates the conf_agent_server package from AWS Corezoid repository with specific version
- name: Install package conf_agent_server
  yum:
    name: "{{ service_name }}-{{ corezoid_release_app_version.conf_agent_server }}"
    state: present
    update_cache: yes
    disablerepo: "*"
    enablerepo: "aws-corezoid"
  tags:
    - conf_agent_server-all
    - conf_agent_server-app
    - conf_agent_server-install

# Create all required directories in a single task using a loop
- name: Create application directories
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    state: directory
    mode: "{{ item.mode }}"
    recurse: "{{ item.recurse }}"
  loop:
    - { path: "{{ top_dir }}/erlang/{{ service_name }}/log", owner: "{{ app_user }}", group: "{{ app_user }}", mode: "0700", recurse: no }
    - { path: "{{ top_dir }}/erlang/{{ service_name }}", owner: "{{ app_user }}", group: "{{ app_user }}", mode: "0700", recurse: yes }
    - { path: "{{ conf_dir }}", owner: "root", group: "root", mode: "0755", recurse: no }
  tags:
    - conf_agent_server-all
    - conf_agent_server-install
    - conf_agent_server-config


# Generate Configuration Agent Server config file
# Creates the application configuration file from template with proper settings
- name: Create conf_agent_server config file
  template: src=templates/{{ corezoid_release }}-{{ service_name }}.config.j2 dest={{ conf_agent_server_config }} owner={{ app_user }} group={{ app_user }} mode=0500
  tags:
    - conf_agent_server-all
    - conf_agent_server-app
    - conf_agent_server-config-file


# Enable and start Configuration Agent Server service
# Ensures the service starts automatically on boot and is running
- name: Enable conf_agent_server to survive reboot
  service:
    name: "{{ service_name }}"
    enabled: yes
    state: started
  tags:
    - conf_agent_server-all
    - conf_agent_server-app
    - conf_agent_server-start

# Create Monit monitoring configuration
# Sets up monitoring for the Configuration Agent Server service
- name: Create monit file
  template: src=templates/{{ item }}.monit.j2 dest=/etc/monit.d/{{ item }} owner=root group=root mode=0600
  with_items:
    - conf_agent_server
  register: monit_file
  tags:
    - conf_agent_server-all
    - conf_agent_server-app
    - conf_agent_server-monit

# Reload Monit configuration
# Applies any changes to the Monit monitoring setup if configuration was modified
- name: Reload monit if config file changed
  service:
    name: monit
    state: reloaded
  when: monit_file.changed
  tags:
    - conf_agent_server-all
    - conf_agent_server-app
    - conf_agent_server-monit