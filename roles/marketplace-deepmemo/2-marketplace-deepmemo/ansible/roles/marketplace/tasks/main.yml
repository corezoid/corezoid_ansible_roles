---
# tasks file for marketplace

- name: Setup general packgaes
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - jq

- name: add files for client's user
  template: src=templates/{{ item }}.j2 dest=/usr/local/bin/{{ item }} owner=root group=root mode=0655
  with_items:
  - "cli.py"
  - "add_support_access"

#- name: add files for client's user
#  template: src=templates/{{ item }} dest=/usr/local/bin/{{ item }} owner=root group=root mode=0655
#  with_items:
#  - "reset_password"
#  - "export-data"
#  - "import-data"
#  - "maintance"

#- name: add files for client's user
#  template: src=templates/{{ item }} dest=/usr/local/bin/{{ item }} owner=root group=root mode=0655
#  when: marketplace_data.cloud == "Amazon"
#  with_items:
#  - "export-data"
#  - "import-data"


#- name: Daily update license status with crontab if Corezoid 4.2
#  when: corezoid_release < 5.0
#  cron:
#    special_time: daily
#    name: "Daily update license expire status with crontab"
#    user: "root"
#    job: "date -d@`license_server license expire` '+%Y-%m-%d %H:%M:%S' >/tmp/license-end"

#- name: Daily update license status with crontab if Corezoid 4.2
#  when: corezoid_release < 5.0
#  cron:
#    special_time: reboot
#    name: "Once update license start status with crontab"
#    user: "root"
#    job: "date -d@`license_server license start`  '+%Y-%m-%d %H:%M:%S' > /tmp/license-start"


#- name: copy ansible playbook for user init
#  copy:
#    src: templates/ansible
#    dest: /opt
#  tags: renew

#- name: Сorezoid_init
#  cron:
#    special_time: reboot
#    name: "corezoid_init with crontab"
#    user: "root"
#    job: "cd /opt/ansible; /bin/ansible-playbook -i hosts corezoid_init.yaml  2>&1 > /tmp/corezoid_init.log"

#- name: Сorezoid_user_init
#  cron:
#    special_time: reboot
#    name: "Init corezoid_user with crontab"
#    user: "root"
#    job: "cd /opt/ansible; /bin/ansible-playbook -i hosts corezoid_user_init.yaml  2>&1 > /tmp/corezoid_user_init.log"


#- name: add ansible filter_plugins
#  lineinfile:
#    path: /root/.bashrc
#    line: 'export ANSIBLE_FILTER_PLUGIN="/opt/ansible/filter_plugins"'

- name: Add support user
  user:
    name: support
    comment: "Support user"
    shell: /bin/bash

- name: Ensure group "support" exists
  group: name=support state=present

- name: add support in sudoers
  lineinfile:
    path: /etc/sudoers
    line: 'support	ALL=(ALL)	NOPASSWD : ALL'

- name: Create .ssh support
  file: path=/home/support/.ssh owner=support group=support state=directory mode=0700

#- name: Configure firewalld
#  raw: "{{ item }}"
#  with_items:
#    - "systemctl enable firewalld"
#    - "systemctl start firewalld"
#    - "chkconfig rabbitmq-server on"
#    - "firewall-cmd --permanent --zone=public --add-port=22/tcp"
#    - "firewall-cmd --permanent --zone=public --add-port=80/tcp"
#    - "firewall-cmd --permanent --zone=public --add-port=443/tcp"
#    # - "firewall-cmd --direct --remove-rule ipv4 filter OUTPUT 1 -o eth0 -d 169.254.169.254/32 -j DROP"
#    # - "firewall-cmd --runtime-to-permanent"
#    - "firewall-cmd --reload"

- name: Clean MW repos
  file: path=/etc/yum.repos.d/{{ item }}.repo state=absent
  with_items:
  - "middleware"
  - "mongo.3.4"
  - "nginx"
  - "epel"

- name: yum-clean-metadata
  command: yum clean metadata
  args:
    warn: no

- name: change hostname
  lineinfile:
    path: /etc/rc.d/rc.local
    line: 'hostnamectl set-hostname deepmemo.loc'

#- name: restart nginx
#  service:
#    name: nginx
#    state: restarted

- name: clean pid for gen new passwd
  shell: "rm -rf /tmp/pwd.pid"

- name: clean root authorized_keys
  shell: "rm -rf /root/.ssh/authorized_keys"

- name: clean ec2-user authorized_keys
  shell: "rm -rf /home/ec2-user/.ssh/authorized_keys"
  when:
    - ansible_distribution == "Amazon"

- name: clean support authorized_keys
  shell: "rm -rf /home/support/.ssh/authorized_keys"

- name: add shell for ec2-user
  lineinfile:
    regexp: '^ec2-user'
    path: /etc/passwd
    line: 'ec2-user:x:1000:1000:EC2 Default User:/home/ec2-user:/usr/local/bin/cli.py'
  when:
    - ansible_distribution == "Amazon"

##python -c "from passlib.hash import sha512_crypt; import getpass; print sha512_crypt.encrypt(getpass.getpass())"
#- name: change shadow password hash
#  user:
#    user: "support"
#    #password:HelloMiddleware
#    password: "$6$rounds=656000$g..xX0zmkZqlizU7$Ed5PyE7Evnimq49yA0VC/hXv21eCMz6EUJ4YoqFYvWULGtNn2gosS83ueUWoC6sHEj/MSW0WhDL9j1xa9DH9.."
#  become: yes
#  when:
#    - ansible_distribution == "CentOS" or ansible_distribution == "RedHat"
#    - ansible_distribution_major_version == "7"
#
#- name: remove tempopary users
#  user: name={{ item }} state=absent remove=yes
#  with_items:
#    - alexfedorets
#    - avinokurov
#    - jenkins-initial
#    - logvinov
#    - gkozlitin
#  become: yes
#  become_user: support
#  when:
#    - ansible_distribution == "CentOS" or ansible_distribution == "RedHat"
#    - ansible_distribution_major_version == "7"
#  553829566451 mw
#  584140875881 dev
#  553829566451553829566451
#553829566451 vir
#  553829566451553829566451

#clear all
- name: all services stop
  service:
    name: "{{ item }}"
    state: stopped
  with_items:
    - eprolog
    - prolog-openapi
    - mongod
    - redis
    - nginx
    
- name: clear logs
  raw: rm -rf {{ item }}
  with_items:
    - /ebsmnt/erlang/*/logs/*
    - /ebsmnt/erlang/*/erl_crash*
    - /ebsmnt/erlang/*/crash.log
    - /var/log/nginx/*
    - /var/log/mongodb/*
    - /var/log/redis/*
    - /root/.bash_history
    - /root/.cache
    - /home/*/.bash_history
    - /var/log/*-*
    
- name: clear logs
  raw: "> {{ item }}"
  with_items:
    - /var/log/secure
    - /var/log/messages
    - /var/log/yum.log

- name: clear history
  raw: history -c
