{% set acc_id = instance_doc.stdout|from_json %}
#!/bin/bash

{% include 'files/header.j2' %}


PGPORT=5433
BUCKET="corezoid-backups-{{ acc_id.accountId }}"
DATE="$(date +%Y%m%d-%H%M%S)"

BACKUPDIR="/ebsmnt/backups"

RESTOREDIR="/ebsmnt/restore"
RESTOREARCH="conveyor-db.tar.gz"

PGUSER="postgres"
SHARDS="$(echo cp{0..1})"
SHARDS_TABLES="charts nodes stream_counters register_stream_counters user_group_privilegies"
CONV_TABLES="api_callbacks,companies,conveyor_to_shard,conveyors,dashboards,esc_conv_to_convs,folder_content,folders,group_to_group,history,login_to_users,logins,payment_plans,payments_history,user_billing_stats,user_billing_tacts,user_dashboards,user_folders,user_group_privilegies,user_groups,user_roles,user_to_companies,user_to_user_groups,users,web_settings"

REDIS_DUMP="/ebsmnt/redis/dump.rdb"

if [ -d "${RESTOREDIR}" ];
	then
		cd ${RESTOREDIR}
		rm -fR ${RESTOREDIR}/*
	else
		mkdir -p ${RESTOREDIR} || exit 1
fi


#aws s3api list-objects --bucket ${BUCKET} | jq ".Contents[].Key" | grep -Eo "^\"[0-9]+" | sed -e "s/\"//" | sort | uniq
aws s3api list-objects --bucket ${BUCKET} | jq ".Contents[].Key" | grep -E "corezoid-db-[0-9-]+.tar.gz"

read -p "Enter one of available date: " MANUAL_INPUT

echo "Entered value: $MANUAL_INPUT"

aws s3api head-object --bucket ${BUCKET} --key $MANUAL_INPUT 1>/dev/null 2>>/dev/null
[ "$?" == 0 ] || { echo "$MANUAL_INPUT not found."; exit 1; }

check_access_to_s3() {
	touch /tmp/check_access.txt
	aws s3 mv /tmp/check_access.txt s3://${BUCKET}/check_access.txt 1>/dev/null 2>/dev/null
	[ "$?" == 0 ] || { echo "s3://${BUCKET} is not accessible for write."; exit 1; }
}

upload_backups(){
	aws s3 cp s3://${BUCKET}/$MANUAL_INPUT ${RESTOREDIR}/${RESTOREARCH} || exit 1
	cd ${RESTOREDIR} && tar xzf ${RESTOREARCH} || exit 1 
}

restore_tables(){
	DBNAME="${1}"
	DBDIR="${RESTOREDIR}/${DBNAME}"

	[ -d "${DBDIR}" ] || { mkdir -p "${DBDIR}"; } 

	# if $2 not defined then dump all tables in database
	if [ "$2" ];
		then
			TABLES="${2}"
		else
			TABLES="$(psql --port ${PGPORT} -U ${PGUSER} ${DBNAME} -Atc "select relname from pg_stat_user_tables where schemaname = 'public' ORDER BY relname" 2>/dev/null)"
	fi

	[ ! -z "${TABLES}" ] || { echo "Tables not found. Is PostgreSQL running?"; exit 1; }
	echo "INFO :: restoring ${DBNAME}"

	for TABLE in ${TABLES}
	do
		 psql -q -o /dev/null -p ${PGPORT} -U ${PGUSER} ${DBNAME} -f ${DBDIR}/${TABLE}.sql || exit 1
	done

}

restore_redis(){
	cd ${RESTOREDIR}
	[ -f "dump.rdb" ] || { echo "dump.rdb not found."; exit 1; }
	echo "INFO :: restoring Redis with counters"
	service redis stop
	cp -f dump.rdb ${REDIS_DUMP}
	chown redis:redis ${REDIS_DUMP}
	service redis start
}

upload_backups
restore_tables "cce"
restore_tables "conveyor"

for DB in ${SHARDS}
do
	restore_tables "$DB" "$SHARDS_TABLES"
done

restore_redis

exit 0
