---

- name: Add PostgreSQL Repo
  include: add_repo.yml
  tags:
    - pgsql-all
    - pgsql-init

- name: First run
  include: install.yml
  tags:
    - pgsql-all
    - pgsql-init

- name: Set psycopg2 package name for Amazon Linux
  set_fact:
    psycopg2_rpm: "python-psycopg2"
  when: ansible_distribution == "Amazon"
  tags:
    - pgsql-all
    - pgsql-install-deps

- name: Set psycopg2 package name for RHEL/CentOS/OracleLinux 7
  set_fact:
    psycopg2_rpm: "python-psycopg2"
  when:
    - ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS' or ansible_distribution == "OracleLinux"
    - ansible_distribution_major_version == "7" or ansible_distribution_major_version == "9"
  tags:
    - pgsql-all
    - pgsql-install-deps

- name: Set psycopg2 package name for RHEL/CentOS/OracleLinux 8
  set_fact:
    psycopg2_rpm: "python3-psycopg2"
  when:
    - ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS' or ansible_distribution == "OracleLinux"
    - ansible_distribution_major_version == "8"
  tags:
    - pgsql-all
    - pgsql-install-deps

- debug: msg="{{ psycopg2_rpm }} - {{ ansible_distribution }} - {{ ansible_distribution_major_version }}"
  tags:
    - pgsql-all
    - pgsql-install-deps
    - pgsql-install-deps-debug

- name: Install packages psycopg2 for RHEL/CentOS/OracleLinux 7
  yum: name={{ item }} state=present update_cache=yes
  retries: 3
  delay: 5
  with_items:
    - "{{ psycopg2_rpm }}"
  when:
    - psycopg2_rpm is defined
  #   # - ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS' or ansible_distribution == "OracleLinux"
  #   # - ansible_distribution_major_version == "7"
  tags:
    - pgsql-all
    - pgsql-install-deps

# - debug: msg="{{ init_db_host }} {{ db_main.port }} {{ db_superuser_login }} {{ db_superuser_password }}"
#   tags:
#     - pgsql-all
#     - pgsql-create-roles-debug

# - name: Create general roles
#   postgresql_user: >
#     login_host={{ db_main.host }}
#     port={{ db_main.port }}
#     login_user={{ db_superuser_login }}
#     login_password={{ db_superuser_password }}
#     db=postgres
#     name={{ item.name }}
#     password=NULL
#     role_attr_flags={{ item.role_attr }}
#     encrypted=true
#   with_items:
#     - { name: "viewers", role_attr: "NOLOGIN" }
#     - { name: "appusers", role_attr: "NOLOGIN" }
#   when: aws_rds
#   tags:
#     - pgsql-all
#     - pgsql-create-roles

# - name: create app user
#   postgresql_user: >
#     login_host={{ db_main.host }}
#     port={{ db_main.port  }}
#     db=postgres
#     name={{ db_app_user }}
#     password={{ db_app_user_pass }}
#     login_user={{ db_superuser_login }}
#     login_password={{ db_superuser_password }}
#     encrypted=yes
#   when: aws_rds
#   tags:
#     - pgsql-all
#     - pgsql-create-app-user

- name: grant role to app user
  postgresql_privs: >
    login_host={{ db_main.host }}
    port={{ db_main.port  }}
    db=postgres
    type=group
    objs=appusers
    roles={{ db_app_user }}
    grant_option=no
    login_user={{ db_superuser_login }}
    login_password={{ db_superuser_password }}
  when: aws_rds
  tags:
    - pgsql-all
    - pgsql-grant-role-to-app-user

- name: Create general roles
  postgresql_user: >
    port={{ db_main.port }}
    db=postgres
    name={{ item.name }}
    role_attr_flags={{ item.role_attr }}
    encrypted=true
  with_items:
    - { name: "viewers", role_attr: "NOLOGIN" }
    - { name: "appusers", role_attr: "NOLOGIN" }
  when: not aws_rds
  tags:
    - pgsql-all
    - pgsql-create-roles

- name: Create app user
  postgresql_user: >
    port={{ db_main.port }}
    db=postgres
    name={{ db_app_user }}
    password={{ db_app_user_pass_enc }}
    encrypted=yes
  when: not aws_rds
  tags:
    - pgsql-all
    - pgsql-create-app-user

- name: Create fdw_user
  postgresql_user: >
    port={{ db_main.port }}
    db=postgres
    name={{ db_fdw_user }}
    password={{ db_fdw_user_pass_enc }}
    encrypted=yes
  when: not aws_rds
  tags:
    - pgsql-all
    - pgsql-create-fdw-user

- name: Grant role to app user
  become: yes
  become_user: postgres
  shell: psql -p {{ db_main.port }} postgres -U postgres -Atc "GRANT appusers TO {{ db_main.user }};"
  when: not aws_rds
  tags:
    - pgsql-all
    - pgsql-grant-role-to-app-user

- name: Grant role to fdw user
  become: yes
  become_user: postgres
  shell: psql -p {{ db_main.port }} postgres -U postgres -Atc "GRANT appusers TO {{ db_fdw_user }};"
  when: not aws_rds
  tags:
    - pgsql-all
    - pgsql-grant-role-to-app-user

# - name: create superuser
#   postgresql_user: >
#     db=postgres
#     name={{ item.name }}
#     password={{ item.pass }}
#     role_attr_flags={{ item.role_attr }}
#     login_host={{ db_main.host }}
#     port={{ db_main.port }}
#     login_user={{ db_superuser_login }}
#     login_password={{ db_superuser_password }}
#   with_items:
#     - { name: "superpuperuser", role_attr: "SUPERUSER,CREATEDB,INHERIT,LOGIN", pass: "superpupersecret" }

- name: Create main dbs
  postgresql_db: >
    name={{ item }}
    login_host={{ db_main.host }}
    port={{ db_main.port }}
  with_items:
    - conveyor
    - cce
    - health_check
    - conveyor_statistics
    - git_call
    - settings
    - accounts
    - limits
  tags:
    - pgsql-all
    - pgsql-create-main-dbs

- name: Change owner accounts database
  postgresql_db: >
    name={{ item }}
    login_host={{ db_main.host }}
    port={{ db_main.port }}
    owner={{ db_main.user }}
  with_items:
    - accounts
  tags:
    - pgsql-all
    - pgsql-create-main-dbs

- name: Create shards db
  postgresql_db: >
    name=cp{{ item }}
    login_host={{ db_main.host }}
    port={{ db_main.port }}
  with_items: '{{ real_db_numbers }}'
  tags:
    - pgsql-all
    - pgsql-create-shard-dbs

- name: Deploy db schema for main db
  include: create_db_from_schema.yml local_db={{ outer_item }}
  with_items:
    - conveyor
    - cce
    - health_check
    - conveyor_statistics
    - git_call
    - settings
    - limits
  loop_control:
    loop_var: outer_item
  async: 60
  poll: 6
  tags:
    - pgsql-all
    - pgsql-deploy-main-schema


- name: Deploy db schema for shards db
  include: create_db_from_schema.yml local_db=cp{{ outer_item }}
  with_items: '{{ real_db_numbers }}'
  loop_control:
    loop_var: outer_item
  async: 60
  poll: "{{ real_db_numbers }}"
  tags:
    - pgsql-all
    - pgsql-deploy-shards-schema

- name: Deploy db schema from_postgres_fdw
  include: create_db_from_postgres_fdw.yml local_db=cp{{ outer_item }}
  with_items: '{{ real_db_numbers }}'
  loop_control:
    loop_var: outer_item
  async: 60
  poll: "{{ real_db_numbers }}"
  tags:
    - pgsql-all
    - pgsql-deploy-shards-schema


# TODO rebuild this method to apply diff between versions
# - name: apply shards ddl
#   include: apply_ddl.yml local_db=cp{{ outer_item }} ddl_file="shards_diff.sql"
#   with_items: '{{ real_db_numbers }}'
#   loop_control:
#     loop_var: outer_item
#   tags:
#     - pgsql-all
#     - pgsql-apply-shards-ddl

# # TODO rebuild this method to apply diff between versions
# - name: apply conveyor ddl
#   include: apply_ddl.yml local_db={{ outer_item }} ddl_file="conveyor_diff.sql"
#   loop_control:
#     loop_var: outer_item
#   with_items:
#     - conveyor
#   tags:
#     - pgsql-all
#     - pgsql-apply-conveyor-ddl

- name: Create viewer users
  include: add_users_to_viewers.yml viewer_user={{ outer_item }}
  with_items:
    - { "name": "{{ db_monitoring_user }}", "password": "{{ db_monitoring_user_password }}" }
  loop_control:
    loop_var: outer_item
  tags:
    - pgsql-all
    - pgsql-create-viewers

# - name: Init PostgreSQL Diff for main DBs
#   include: diff.yml local_db={{ outer_item }}
#   with_items:
#     - conveyor
#     - cce
#     - health_check
#     - conveyor_statistics
#     - git_call
#     - settings
#     - limits
#   loop_control:
#     loop_var: outer_item
#   tags:
#     - pgsql-all
#     - pgsql-diff

# - name: Init PostgreSQL Diff for Shards DBs
#   include: diff.yml local_db=cp{{ outer_item }}
#   with_items: '{{ real_db_numbers }}'
#   loop_control:
#     loop_var: outer_item
#   tags:
#     - pgsql-all
#     - pgsql-diff

- name: Init PgBouncer
  include: pgbouncer.yml
  tags:
    - pgsql-all
    - pgsql-pgbouncer
