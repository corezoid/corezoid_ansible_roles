# Set default cron schedule for database maintenance if not defined
- name: set minute for cron clean tasks archive
  set_fact: tasks_archive_cron_minute=0
  when: tasks_archive_cron_minute is not defined
  tags:
    - postgresql-all
    - postgresql-maintenance
    - postgresql-maintenance-cron

# Set default hour for database cleanup tasks
- name: set hour for cron clean tasks archive
  set_fact: tasks_archive_cron_hour=20
  when: tasks_archive_cron_hour is not defined
  tags:
    - postgresql-all
    - postgresql-maintenance
    - postgresql-maintenance-cron

# Set default weekday for database cleanup tasks (run every day)
- name: set weekday for cron clean tasks archive
  set_fact: tasks_archive_cron_weekday="*"
  when: tasks_archive_cron_weekday is not defined
  tags:
    - postgresql-all
    - postgresql-maintenance
    - postgresql-maintenance-cron

# Clean YUM cache before package installation
- name: Yum clean all
  command: yum clean all
  tags:
    - postgresql-all
    - postgresql-install-packages

# Configure Oracle Linux specific PostgreSQL repository
- name: Copy postgresql repo Oracl Linux
  copy:
    src: oracllinux_pg13.repo
    dest: /etc/yum.repos.d/oracllinux_pg13.repo
  when:
    - ansible_distribution == "OracleLinux"
    - ansible_distribution_major_version == "8"
  tags:
    - postgresql-all
    - postgresql-install-packages

# Disable built-in PostgreSQL module on Oracle Linux 8
- name: Disable PostgreSQL module using dnf command
  command: "dnf -y module disable postgresql"
  when:
    - ansible_distribution == "OracleLinux"
    - ansible_distribution_major_version == "8"
  tags:
    - postgresql-all
    - postgresql-install-packages

# Install PostgreSQL packages for non-Amazon distributions
- name: Install PostgreSQL packages
  yum: name={{ item }} state=present update_cache=yes
  with_items:
    - postgresql{{ db_ver }}
    - postgresql{{ db_ver }}-server
    - postgresql{{ db_ver }}-contrib
    - pg_repack_{{ db_ver }}
  when: ansible_distribution != "Amazon"
  tags:
    - postgresql-all
    - postgresql-install-packages

# Install PostgreSQL packages for Amazon Linux 2
- name: Install PostgreSQL packages
  yum: name={{ item }} state=present update_cache=yes
  with_items:
    - postgresql{{ db_ver }}
    - postgresql{{ db_ver }}-server
    - postgresql{{ db_ver }}-contrib
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2"
  tags:
    - postgresql-all
    - postgresql-install-packages

# Install PostgreSQL packages for Amazon Linux 2023
- name: Install PostgreSQL packages
  yum: name={{ item }} state=present update_cache=yes
  with_items:
    - postgresql{{ db_ver }}
    - postgresql{{ db_ver }}-server
    - postgresql{{ db_ver }}-contrib
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2023"
  tags:
    - postgresql-all
    - postgresql-install-packages

# Install Pglibs for Amazon Linux 2023
# Determines appropriate pgbouncer RPM package based on OS distribution, version and architecture
- name: Set Pg_libs package facts
  set_fact:
    pg_libs_rpm_file: >-
      {{ {
        'Amazon-2023-x86_64': [
          'pg_repack_15-1.5.0-1PGDG.rhel9.x86_64.rpm',
          'pglogical_15-2.4.3-1.rhel9.x86_64.rpm',
          'pglogical_15-llvmjit-2.4.3-1.rhel9.x86_64.rpm'
        ],
        'Amazon-2023-aarch64': [
           'pg_repack_15-1.5.0-1PGDG.rhel9.aarch64.rpm',
           'pglogical_15-2.4.3-1.rhel9.aarch64.rpm',
           'pglogical_15-llvmjit-2.4.3-1.rhel9.aarch64.rpm'
        ]
      }[ansible_distribution ~ '-' ~ ansible_distribution_major_version ~ '-' ~ ansible_architecture] }}
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2023"


# Copy pglibs package to the target system
# Transfers the appropriate pgbouncer RPM package with proper ownership and permissions
- name: Copy pglibs Packages for {{ ansible_distribution }}-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}
  copy:
    src: "files/{{ item }}"
    dest: "/tmp/{{ item }}"
    owner: root
    group: root
    mode: '0644'
  loop: "{{ pg_libs_rpm_file }}"
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2023"
  tags:
    - postgresql-all
    - postgresql-install-packages

# Install pgbouncer using YUM package manager
# Executes YUM to install pgbouncer package, continues on errors for resilience
- name: Install pglibs Packages for {{ ansible_distribution }}-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}
  command: yum install /tmp/{{ item }} -y
  ignore_errors: true
  loop: "{{ pg_libs_rpm_file }}"
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2023"
  tags:
    - postgresql-all
    - postgresql-install-packages

# Clean up the installation package
# Removes temporary RPM file after installation is complete
- name: Remove pglibs Packages for {{ ansible_distribution }}-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}
  file:
    path: "/tmp/{{ item }}"
    state: absent
  loop: "{{ pg_libs_rpm_file }}"
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2023"
  tags:
    - postgresql-all
    - postgresql-install-packages
#Create pglogical symlinks
- name: Create pglogical symlinks for {{ ansible_distribution }}-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}
  file:
    src: "/usr/pgsql-15/lib/{{ item }}"
    dest: "/usr/lib64/pgsql/{{ item }}"
    state: link
    force: yes
  loop:
    - pglogical.so
    - pglogical_output.so
    - pg_repack.so
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2023"
  tags:
    - postgresql-all
    - postgresql-install-packages

#Create pgrepack symlinks
- name: Create pgrepack symlinks for {{ ansible_distribution }}-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}
  file:
    src: "/usr/pgsql-15/bin/pg_repack"
    dest: "/usr/bin/pg_repack"
    state: link
    force: yes
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2023"
  tags:
    - postgresql-all
    - postgresql-install-packages


# Enable PostgreSQL service on Amazon Linux 2023
- name: enable postgresql to survive reboot
  service: name={{ item }} enabled=yes
  with_items:
    - postgresql
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2023"
  tags:
    - postgresql-all
    - postgresql-install

# Enable PostgreSQL service on Amazon Linux 2
- name: enable postgresql to survive reboot
  service: name={{ item }} enabled=yes
  with_items:
    - postgresql-{{ db_ver }}
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2"
  tags:
    - postgresql-all
    - postgresql-install

# Enable PostgreSQL service on other distributions
- name: enable postgresql{{ db_ver }} to survive reboot
  service: name={{ item }} enabled=yes
  with_items:
    - postgresql-{{ db_version }}
  when: ansible_distribution != "Amazon"
  tags:
    - postgresql-all
    - postgresql-install

# Deploy PostgreSQL system configuration for service
- name: Add config to /etc/sysconfig/pgsql/
  template:
    src: templates/sysconfig-postgresql.j2
    dest: /etc/sysconfig/pgsql/postgresql-{{ db_version }}
  when: ansible_distribution != "Amazon"
  tags:
    - postgresql-all
    - postgresql-install

# Create top-level directory for PostgreSQL data
- name: Creates top directory for postgres
  file:
    path: "{{ top_db_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0775
  tags:
    - postgresql-all
    - postgresql-create-dirs

# Create database directory with proper permissions
- name: Creates db directory for postgres
  file:
    path: "{{ db_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: 0700
  tags:
    - postgresql-all
    - postgresql-create-dirs

# Configure sudo access for wheel group
- name: ensure wheel group
  lineinfile:
    regexp: '# %wheel	ALL=(ALL)	NOPASSWD: ALL'
    path: /etc/sudoers
    line: '%wheel	ALL=(ALL)	NOPASSWD: ALL'
  tags:
    - postgresql-all
    - postgresql-add-sudoers

# Check if PostgreSQL data directory is already initialized
- name: Check if PostgreSQL database is initialized.
  stat:
    path: "{{ db_dir }}/{{ db_version }}/data/PG_VERSION"
  register: pgdata_dir_version
  tags:
    - postgresql-all
    - postgresql-initdb

# Initialize PostgreSQL database on non-Amazon distributions
- name: Init DB
  become: true
  become_user: postgres
  when:
    - not pgdata_dir_version.stat.exists
    - ansible_distribution != "Amazon"
  shell: /usr/pgsql-{{ db_version }}/bin/initdb -D {{ db_dir }}/{{ db_version }}/data --locale=en_US.UTF-8
  args:
    executable: /bin/bash
  tags:
    - postgresql-all
    - postgresql-initdb

# Install PostgreSQL Python driver for Amazon Linux 2
- name: Install aws-psycopg2
  when:
    - not pgdata_dir_version.stat.exists
    - ansible_distribution == "Amazon" and ansible_distribution_major_version == "2"
  pip:
    name: aws-psycopg2
    executable: pip-3.7
  tags:
    - postgresql-all
    - postgresql-initdb

# Initialize PostgreSQL database on Amazon Linux 2
- name: Init DB AMI2
  become: true
  become_user: postgres
  when:
    - not pgdata_dir_version.stat.exists
    - ansible_distribution == "Amazon" and ansible_distribution_major_version == "2"
  shell: /usr/pgsql-{{ db_version }}/bin/initdb -D {{ db_dir }}/{{ db_version }}/data --locale=en_US.UTF-8
  args:
    executable: /bin/bash
  tags:
    - postgresql-all
    - postgresql-initdb

# Initialize PostgreSQL database on Amazon Linux 2023
- name: Init DB AMI3
  become: true
  become_user: postgres
  when:
    - not pgdata_dir_version.stat.exists
    - ansible_distribution == "Amazon" and ansible_distribution_major_version == "2023"
  shell: /usr/bin/initdb -D {{ db_dir }}/{{ db_version }}/data --locale=en_US.UTF-8
  args:
    executable: /bin/bash
  tags:
    - postgresql-all
    - postgresql-initdb

# Remove default PostgreSQL data directory
- name: Delete default pgsql directory
  file:
    path: "/var/lib/pgsql"
    state: absent
  when:
    - not pgdata_dir_version.stat.exists
  tags:
    - postgresql-all
    - postgresql-create-dirs
#
## Create symlink to custom PostgreSQL data directory
- name: Create link to pgsql directory
  file:
    src: "{{ db_dir }}"
    dest: "/var/lib/pgsql"
    state: link
    owner: postgres
    group: postgres
    mode: 0700
  tags:
    - postgresql-all
    - postgresql-create-dirs

# Deploy PostgreSQL user environment settings
- name: Add .bashrc file
  template: src=templates/bashrc.j2 dest={{ db_dir }}/.bashrc mode=0660 owner=postgres
  tags:
    - postgresql-all
    - postgresql-create-files

# Configure PostgreSQL client authentication
- name: Add pg_hba.conf
  template: src=templates/pg_hba-box.conf.j2 dest={{ db_dir }}/{{ db_version }}/data/pg_hba.conf mode=0700 owner=postgres
  tags:
    - postgresql-all
    - postgresql-config-files

# Configure PostgreSQL main settings
- name: Add postgresql.conf
  template:
    src: "templates/postgresql-box-{{ db_version }}.conf.j2"
    dest: "{{ db_dir }}/{{ db_version }}/data/postgresql.conf"
    mode: 0700
    owner: postgres
  # when:
  #   - db_replica_enable is not defined
  #   - not db_replica_enable
  tags:
    - postgresql-all
    - postgresql-config-files

# Start PostgreSQL service on non-Amazon distributions
- name: Start database service
  service:
    name: "{{ item }}"
    state: started
  with_items:
    - postgresql-{{ db_version }}
  when: ansible_distribution != "Amazon"
  tags:
    - postgresql-all
    - postgresql-start-db

# Start PostgreSQL service on Amazon Linux 2
- name: Start database service AMI2
  block:
    - name: Reload systemctl
      shell: systemctl daemon-reload
    - name: Start database service on AMI2
      service: name={{ item }} state=started
      with_items:
        - postgresql-{{ db_version }}
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2"
  tags:
    - postgresql-all-333
    - postgresql-start-db

# Start PostgreSQL service on Amazon Linux 2023
- name: Start database service AMI3
  block:
    - name: Create systemd drop-in directory
      file:
        path: /etc/systemd/system/postgresql.service.d
        state: directory
        mode: 0755
        owner: root
        group: root
    - name: Create PGDATA override configuration
      copy:
        content: |
          [Service]
          Environment="PGDATA=/postgresqldata/pgsql/{{ db_ver }}/data/"
        dest: /etc/systemd/system/postgresql.service.d/{{ db_ver }}-pgdata.conf
        owner: root
        group: root
        mode: 0644
   # - name: Change Path
    #  lineinfile:
    #    path: /usr/lib/systemd/system/postgresql.service
    #    regexp: '^Environment=PGDATA='
    #    line: 'Environment=PGDATA=/postgresqldata/pgsql/{{ db_ver }}/data/'
      #shell: sudo sed 's|Environment=PGDATA=/var/lib/pgsql/data|Environment=PGDATA=/postgresqldata/pgsql/{{ db_ver }}/data/|' /usr/lib/systemd/system/postgresql.service
    - name: Reload systemctl
      shell: systemctl daemon-reload
    - name: Start database service on AMI3
      service: name={{ item }} state=started
      with_items:
        - postgresql
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2023"
  tags:
    - postgresql-all-333
    - postgresql-start-db

# Create directory for maintenance scripts
- name: Create scripts folder
  file:
    path: "{{ db_dir }}/scripts"
    state: directory
    mode: 0755
    owner: postgres
  tags:
    - postgresql-all
    - postgresql-maintenance

# Deploy database maintenance script
- name: Add maintenance.sh
  template:
    src: "templates/maintenance.sh.j2"
    dest: "{{ db_dir }}/scripts/maintenance.sh"
    mode: 0700
    owner: postgres
  tags:
    - postgresql-all
    - postgresql-maintenance
    - postgresql-maintenance-file

# Configure scheduled task for database cleanup
- name: Add cron for cleaning DB
  cron:
    name: "clean history and archives"
    user: postgres
    minute: "{{ tasks_archive_cron_minute }}"
    hour: "{{ tasks_archive_cron_hour }}"
    weekday: "{{ tasks_archive_cron_weekday }}"
    job: "cd {{ db_dir }}/scripts; bash maintenance.sh truncate_all"
  tags:
    - postgresql-all
    - postgresql-maintenance
    - postgresql-maintenance-cron

# Configure scheduled task for task history cleanup
- name: Add cron for cleaning tasks_history
  cron:
    name: "Clean history"
    user: postgres
    minute: 0
    hour: 21
    job: "cd {{ db_dir }}/scripts; bash maintenance.sh truncate_tasks_history"
  tags:
    - postgresql-all
    - postgresql-maintenance
    - postgresql-maintenance-cron
