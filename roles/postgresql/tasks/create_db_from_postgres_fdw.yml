# Create postgres_fdw extension for foreign table support
- name: create extension postgres_fdw
  become: yes
  become_user: postgres
  shell: psql -p {{ db_main.port }} -U postgres {{ local_db }} -Atc "CREATE extension IF NOT EXISTS postgres_fdw;"
  tags:
    - pgsql-all
    - pgsql-deploy-schema

# Create pgcrypto extension and update UUIDs for duplicate record
- name: create extension pgcrypto {{ local_db }}
  become: yes
  become_user: postgres
  shell: psql -p {{ db_main.port }} -U postgres {{ local_db }} -Atc "CREATE EXTENSION IF NOT EXISTS pgcrypto; with q As (select id, count(*) over (partition by conveyor_id, uuid) as c from nodes), q1 AS( select * from q WHERE c>1) UPDATE nodes SET uuid = gen_random_uuid() FROM q1 WHERE nodes.id = q1.id; with q As (select id, count(*) over (partition by dashboard_id, uuid) as c from charts), q1 AS (select * from q WHERE c>1) UPDATE charts SET uuid = gen_random_uuid() FROM q1 WHERE charts.id = q1.id;"
  tags:
    - pgsql-all
    - pgsql-deploy-schema

# Grant postgres_fdw usage permission to main database user
- name: GRANT postgres_fdw {{ local_db }}
  become: yes
  become_user: postgres
  shell: psql -p {{ db_main.port }} -U postgres {{ local_db }} -Atc "GRANT USAGE ON FOREIGN DATA WRAPPER postgres_fdw TO {{ db_main.user }}"
  tags:
    - pgsql-all
    - pgsql-deploy-schema

# Grant all privileges on public schema to appusers group
- name: GRANT postgres_fdw public  {{ local_db }}
  become: yes
  become_user: postgres
  shell: psql -p {{ db_main.port }} -U postgres {{ local_db }} -Atc "GRANT ALL PRIVILEGES ON SCHEMA public TO appusers;"
  tags:
    - pgsql-all
    - pgsql-deploy-schema

# Grant postgres_fdw usage permission to appusers group
- name: GRANT postgres_fdw {{ local_db }}
  become: yes
  become_user: postgres
  shell: psql -p {{ db_main.port }} -U postgres {{ local_db }} -Atc "GRANT USAGE ON FOREIGN DATA WRAPPER postgres_fdw TO appusers"
  tags:
    - pgsql-all
    - pgsql-deploy-schema

# Grant select permission on pg_user_mapping table to appusers group
- name: GRANT pg_user_mapping {{ local_db }}
  become: yes
  become_user: postgres
  shell: psql -p {{ db_main.port }} -U postgres {{ local_db }} -Atc "GRANT SELECT ON TABLE pg_user_mapping TO appusers;"
  tags:
    - pgsql-all
    - pgsql-deploy-schema

# нужно потестить
## Configure PostgreSQL extensions and permissions for {{ local_db }}
#- name: Configure PostgreSQL FDW and crypto extensions
#  become: yes
#  become_user: postgres
#  block:
#    - name: Create PostgreSQL extensions
#      shell: >
#        psql -p {{ db_main.port }} -U postgres {{ local_db }} -Atc
#        "{{ item }}"
#      with_items:
#        - CREATE EXTENSION IF NOT EXISTS postgres_fdw;
#        - CREATE EXTENSION IF NOT EXISTS pgcrypto; with q As (select id, count(*) over (partition by conveyor_id, uuid) as c from nodes), q1 AS( select * from q WHERE c>1) UPDATE nodes SET uuid = gen_random_uuid() FROM q1 WHERE nodes.id = q1.id; with q As (select id, count(*) over (partition by dashboard_id, uuid) as c from charts), q1 AS (select * from q WHERE c>1) UPDATE charts SET uuid = gen_random_uuid() FROM q1 WHERE charts.id = q1.id;
#
#    - name: Grant PostgreSQL permissions
#      shell: >
#        psql -p {{ db_main.port }} -U postgres {{ local_db }} -Atc
#        "{{ item }}"
#      with_items:
#        - GRANT USAGE ON FOREIGN DATA WRAPPER postgres_fdw TO {{ db_main.user }};
#        - GRANT ALL PRIVILEGES ON SCHEMA public TO appusers;
#        - GRANT USAGE ON FOREIGN DATA WRAPPER postgres_fdw TO appusers;
#        - GRANT SELECT ON TABLE pg_user_mapping TO appusers;
#  tags:
#    - pgsql-all
#    - pgsql-deploy-schema