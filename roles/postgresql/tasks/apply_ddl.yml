# files/migrations/

- name: set name for ddl file
  set_fact:
    local_db_schema: "{{ schema_path }}/{{ schema_path_suffix }}/{{ ddl_file }}"
    remote_db_schema: "/tmp/{{ ddl_file }}"
  tags:
    - debug-tunnel-var

- name: deploy schema files to remote host
  copy:
    src: "{{ local_db_schema }}"
    dest: "{{ remote_db_schema }}"
    owner: postgres
    group: postgres
    mode: 0644
  when: not ssh_tunnel

- name: set schema name for ssh_tunnel
  set_fact:
    ddl_schema: "{{ ssh_tunnel | ternary(local_db_schema,remote_db_schema) }}"
  tags:
    - debug-tunnel-var

- name: apply ddl on {{ local_db }}
  become: yes
  become_user: postgres
  shell: psql -p {{ db_main.port }} {{ local_db }} -At -f {{ ddl_schema }}
  register: check_ddl_status

# - name: apply ddl on {{ local_db }}
#   shell: psql -h {{ init_db_host }} -p {{ init_db_port }} -U {{ db_superuser_login }} {{ local_db }} -At -f {{ ddl_schema }}
#   register: check_ddl_status

- debug: msg={{ check_ddl_status }}

- name: grant privileges on all tables in {{ local_db }}
  postgresql_privs: >
    db={{ local_db }}
    privs={{ item.privs }}
    objs=ALL_IN_SCHEMA
    schema=public
    type={{ item.obj_type }}
    role={{ item.name }}
    login_host={{ db_main.host }}
    port={{ db_main.port }}
    grant_option=no
  with_items:
    - { name: "appusers", obj_type: "table", privs: "SELECT,INSERT,UPDATE,DELETE" }
    - { name: "appusers", obj_type: "sequence", privs: "SELECT,UPDATE" }
    - { name: "viewers", obj_type: "table", privs: "SELECT" }
    - { name: "viewers", obj_type: "sequence", privs: "SELECT" }

    # login_user={{ db_superuser_login }}
    # login_password={{ db_superuser_password }}