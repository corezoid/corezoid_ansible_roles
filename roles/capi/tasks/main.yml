---
#-------------CAPI-------------#

# Set service name as a fact for consistent usage
- name: Set service name variable
  set_fact:
    service_name: "capi"
  tags:
    - always

# Clean YUM cache to ensure fresh package metadata
# Removes all cached package data to prevent installation issues
- name: Yum clean all
  command: yum clean all
  tags:
    - capi-all
    - capi-app
    - capi-install

# Install CAPI package from AWS Corezoid repository
# Installs or updates the CAPI application package with specific version
- name: Install packages
  yum:
    name: "{{ service_name }}-{{ corezoid_release_app_version.capi }}"
    state: present
    update_cache: yes
    disablerepo: "*"
    enablerepo: "aws-corezoid"
  tags:
    - capi-all
    - capi-app
    - capi-install


# Create all required directories in a single task using a loop
- name: Create application directories
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    state: directory
    mode: "{{ item.mode }}"
    recurse: "{{ item.recurse }}"
  loop:
    - { path: "{{ top_dir }}/erlang/{{ service_name }}/log", owner: "{{ app_user }}", group: "{{ app_user }}", mode: "0700", recurse: no }
    - { path: "{{ conf_dir }}", owner: "{{ app_user }}", group: "{{ app_user }}", mode: "0500", recurse: no }
    - { path: "{{ top_dir }}/erlang/{{ service_name }}", owner: "{{ app_user }}", group: "{{ app_user }}", mode: "0700", recurse: yes }
  tags:
    - capi-all
    - capi-install
    - capi-config

- name: Ensure avatar directory exists with default avatar
  block:
    - name: Check if avatar directory exists
      stat:
        path: "{{ top_dir }}/www/static/avatars"
      register: avatar_dir_status

    - name: Create avatar directory
      file:
        path: "{{ top_dir }}/www/static/avatars"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        state: directory
        mode: "0755"
        recurse: yes
      when: not avatar_dir_status.stat.exists

    - name: Check if default avatar exists
      stat:
        path: "{{ top_dir }}/www/static/avatars/0.jpg"
      register: avatar_check

    - name: Copy default avatar if missing
      copy:
        src: "files/default_avatar.jpg"
        dest: "{{ top_dir }}/www/static/avatars/0.jpg"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: "0644"
      when: not avatar_check.stat.exists
  tags:
    - capi-all
    - capi-app
    - capi-static-env


# Generate CAPI configuration file
# Creates the application configuration file from template
- name: Create capi.config file
  template: src=templates/{{ corezoid_release }}-{{ service_name }}.config.j2 dest={{ capi.config }} owner={{ app_user }} group={{ app_user }} mode=0500
  tags:
    - capi-all
    - capi-config
    - capi-config-file

# Enable CAPI service
# Ensures CAPI service starts on boot and is running
- name: Enable capi to survive reboot
  service:
    name: "{{ service_name }}"
    enabled: yes
    state: started
  tags:
    - capi-all
    - capi-app
    - capi-start

# Create Monit monitoring configuration
# Sets up monitoring for the CAPI service
- name: Create monit file
  template: src=templates/{{ item }}.monit.j2 dest=/etc/monit.d/{{ item }} owner=root group=root mode=0600
  with_items:
    - capi
  register: monit_file
  tags:
    - capi-all
    - capi-app
    - capi-monit

# Reload Monit configuration
# Applies any changes to the Monit monitoring setup
- name: Reload monit if config file changed
  service:
    name: monit
    state: reloaded
  when: monit_file.changed
  tags:
    - capi-all
    - capi-app
    - capi-monit