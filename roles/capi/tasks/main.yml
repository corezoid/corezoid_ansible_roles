---
#-------------CAPI-------------#
- name: current ansible_all_ipv4_addresses
  debug: msg={{ ansible_all_ipv4_addresses }}
  tags:
    - capi-all
    - capi-app
    - capi-debug

- name: Yum clean all
  command: yum clean all
#  args:
#    warn: false
  tags:
    - capi-all
    - capi-app
    - capi-install

- name: Install packages
  yum:
    name: "{{ item }}"
    state: present
    update_cache: yes
    disablerepo: "*"
    enablerepo: "aws-corezoid"
  with_items:
    - capi-{{ corezoid_release_app_version.capi }}
  tags:
    - capi-all
    - capi-app
    - capi-install

- name: add log directory
  file: path={{ top_dir }}/erlang/{{ item }}/log owner={{ app_user }} group={{ app_user }} state=directory mode=0700
  with_items:
    - capi
  tags:
    - capi-all
    - capi-app
    - capi-install

- name: Fix permission for capi folder
  file: path={{ top_dir }}/erlang/{{ item }} owner={{ app_user }} group={{ app_user }} state=directory mode=0700 recurse=yes
  with_items:
    - capi
  tags:
    - capi-all
    - capi-app
    - capi-install

- name: check static folder
  stat: path={{ top_dir }}/www/static/avatars
  register: static_folder_check
  tags:
    - capi-all
    - capi-app
    - capi-static-env

- name: Make folder for static content
  file: path={{ top_dir }}/www/static/avatars owner={{ app_user }} group={{ app_user }} state=directory mode=0755 recurse=yes
  when: static_folder_check.stat.isreg is not defined
  tags:
    - capi-all
    - capi-app
    - capi-static-env

- name: check default avatar
  stat: path={{ top_dir }}/www/static/avatars/0.jpg
  register: def_avatar_check
  tags:
    - capi-all
    - capi-app
    - capi-static-env

- name: add default avatars
  copy: src=files/default_avatar.jpg dest={{ top_dir }}/www/static/avatars/0.jpg owner={{ app_user }} group={{ app_user }} mode=0644
  when: def_avatar_check.stat.isreg is not defined
  tags:
    - capi-all
    - capi-app
    - capi-static-env

- name: check market folder
  stat: path={{ top_dir }}/www/market
  register: market_folder_check
  tags:
    - capi-all
    - capi-app
    - capi-market-env

- name: Make folder for market scheme
  file: path={{ top_dir }}/www/market/scheme owner={{ app_user }} group={{ app_user }} state=directory mode=0755 recurse=yes
  when: market_folder_check.stat.isreg is not defined
  tags:
    - capi-all
    - capi-app
    - capi-market-env

- name: Make config folder
  file: path={{ conf_dir }} owner={{ app_user }} group={{ app_user }} state=directory mode=0500
  tags:
    - capi-all
    - capi-app
    - capi-config

- name: Create capi config file
  template: src=templates/{{ corezoid_release }}-{{ item }}.config.j2 dest={{ capi.config }}
  with_items:
    - capi
  tags:
    - capi-all
    - capi-app
    - capi-config
    - capi-config-file

- name: Fix permission to capi.config file
  file: state=file path={{ capi.config }} owner={{ app_user }} group={{ app_user }} mode=0500
  with_items:
    - capi
  when: ansible_host != "127.0.0.1"
  tags:
    - capi-all
    - capi-app
    - capi-config
    - capi-config-file

- name: Make backup /etc/hosts
  copy:
    dest: /etc/hosts.bac
    src: /etc/hosts
    remote_src: true
  register: copy_file
  when:  install_all_in_one == true
  tags:
    - capi-all
    - capi-app
    - capi-config
    - capi-hosts-file

- debug: var=copy_file.backup_file

- name: Generate /etc/hosts for local conn
  file:
    src: "/ebsmnt/www/conf-agent-client"
    dest: "/ebsmnt/www/conf-agent-client/superadmin"
    state: link
  when:  install_all_in_one == true
  tags:
    - front-capi-all
    - front-capi-nginx-setup
    - front-capi-nginx-configs
    - front-capi-nginx-symlink



#- name: Generate /etc/hosts for local conn
#  template: src=templates/hosts.j2 dest=/etc/hosts owner=root group=root mode=0644
#  when:  install_all_in_one == true
#  tags:
#    - capi-all
#    - capi-app
#    - capi-config
#    - capi-hosts-file

- name: Setup app systemd
  block:
    - name: Install systemd file
      template: src=templates/{{ item }}.service.j2 dest=/etc/systemd/system/{{ item }}.service owner=root group=root mode=0644
      with_items:
        - capi
    - name: Reload systemctl
      shell: systemctl daemon-reload
  when:
    - ansible_os_family == "RedHat" or ansible_os_family == "CentOS" or ansible_distribution == "Amazon"
    - ansible_distribution_major_version == "7" or ansible_distribution_major_version == "2" or ansible_distribution_major_version == "8" or ansible_distribution_major_version == "9" or ansible_distribution_major_version == "2023"
  tags:
    - capi-all
    - capi-app
    - capi-systemd

- name: check capi.service.d folder
  stat:
    path: "/etc/systemd/system/capi.service.d"
  register: systemd_folder_check
  tags:
    - capi-all
    - capi-app
    - capi-systemd

- name: Setup app systemd
  block:
    - name: Make folder for static content
      file:
        path: "/etc/systemd/system/{{ item }}.service.d"
        owner: root
        group: root
        state: directory
        mode: 0755
        recurse: yes
      with_items:
        - capi
    - name: Reload systemctl
      shell: systemctl daemon-reload
  when:
    - systemd_folder_check.stat.isreg is not defined
    - ansible_os_family == "RedHat" or ansible_os_family == "CentOS" or ansible_distribution == "Amazon"
    - ansible_distribution_major_version == "7" or ansible_distribution_major_version == "2" or ansible_distribution_major_version == "8" or ansible_distribution_major_version == "9" or ansible_distribution_major_version == "2023"
  tags:
    - capi-all
    - capi-app
    - capi-systemd

- name: Setup app systemd
  block:
    - name: Install limits file
      template: src=templates/limits dest=/etc/systemd/system/{{ item }}.service.d/limits.conf owner=root group=root mode=0644
      with_items:
        - capi
    - name: Reload systemctl
      shell: systemctl daemon-reload
  when:
    # - systemd2_folder_check.stat.isreg
    - ansible_os_family == "RedHat" or ansible_os_family == "CentOS" or ansible_distribution == "Amazon"
    - ansible_distribution_major_version == "7" or ansible_distribution_major_version == "2" or ansible_distribution_major_version == "8" or ansible_distribution_major_version == "9" or ansible_distribution_major_version == "2023"
  tags:
    - capi-all
    - capi-app
    - capi-systemd


- name: Enable capi to survive reboot
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
    # no_block: yes
  with_items:
    - capi
  tags:
    - capi-all
    - capi-app
    - capi-initd
    - capi-initd-start


# - name: Set number of replicas
#   uri:
#     url: "http://{{ capi_es_host }}:9200/*/_settings?pretty"
#     method: PUT
#     body: "{ \"template\": \"*\", \"settings\": { \"number_of_replicas\": 0  }}"
#     body_format: json
#     headers:
#       Content-Type: "application/json"
#   tags:
#     - capi-all
#     - capi-app
#     - capi-elasticsearch

- name: Change capi-id in config
  cron:
    special_time: reboot
    name: "Change capi-id in config"
    user: "root"
    job: "rand_id=$(pwgen -n 20 -s 1); sed -i -e \"s/{{ capi_id }}/${rand_id}/g\" {{ capi.config }}"
  when: autoscale
  tags:
    - capi-all
    - capi-app
    - capi-cron

- name: Create monit file
  template: src=templates/{{ item }}.monit.j2 dest=/etc/monit.d/{{ item }} owner=root group=root mode=0600
  with_items:
    - capi
  register: monit_file
  tags:
    - capi-all
    - capi-app
    - capi-monit

- name: Reload monit if config file changed
  service:
    name: monit
    state: reloaded
  when: monit_file.changed
  tags:
    - capi-all
    - capi-app
    - capi-monit

# - name: Run Goss
#   import_tasks: goss.yml
#   tags:
#     - capi-all
#     - capi-goss


#----------------NGINX-------------------

# - name: Yum clean all
#   command: yum clean all
#   args:
#     warn: false
#   tags:
#     - capi-all
#     - capi-nginx-setup
#     - capi-nginx-package

# - name: Install nGinx package
#   yum:
#     name: "{{ item }}"
#     state: present
#     update_cache: yes
#   with_items:
#     - nginx
#   tags:
#     - capi-all
#     - capi-nginx-setup
#     - capi-nginx-package

# - name: Install corezoid-web-admin package
#   yum:
#     name: "{{ item }}"
#     state: present
#     update_cache: yes
#     disablerepo: "*"
#     enablerepo: "aws-corezoid"
#   with_items:
#     - corezoid-web-admin-{{ corezoid_release_app_version.corezoid_web_admin }}
#   tags:
#     - capi-all
#     - capi-nginx-setup
#     - capi-nginx-package-corezoid-web

# - name: Install Superadmin static
#   yum:
#     name: "{{ item }}"
#     state: present
#     update_cache: yes
#     disablerepo: "*"
#     enablerepo: "aws-corezoid"
#   with_items:
#     - conf-agent-client
#   when: corezoid_release > 4.2
#   tags:
#     - capi-all
#     - capi-nginx-setup
#     - capi-nginx-superadmin


# - name: Create nGinx img dir
#   file: path={{ top_dir }}/img owner=nginx group=nginx state=directory mode=0755
#   tags:
#     - capi-all
#     - capi-nginx-setup
#     - capi-nginx-setup-img

# - name: Create nGinx dir for favicon and logo
#   file: path={{ top_dir }}/img/{{ item }} owner=nginx group=nginx state=directory mode=0755
#   with_items:
#     - "favicon"
#     - "logo"
#   tags:
#     - capi-all
#     - capi-nginx-setup
#     - capi-nginx-setup-img

# - name: Add default avatars
#   copy: src=files/img/{{ item }} dest={{ top_dir }}/img owner=nginx group=nginx mode=0644
#   # when: def_avatar_check.stat.isreg is not defined
#   with_items:
#     - "favicon"
#     - "logo"
#   tags:
#     - capi-all
#     - capi-nginx-setup
#     - capi-nginx-setup-img

# - name: Delete nGinx default configs
#   file: path=/etc/nginx/conf.d/{{ item }} state=absent
#   with_items:
#     - "default.conf"
#     - "virtual.conf"
#     - "ssl.conf"
#   tags:
#     - capi-all
#     - capi-nginx-setup
#     - capi-nginx-delete

# - name: Create nGinx main configs
#   template: src=templates/{{ corezoid_release }}-{{ item }}.j2 dest=/etc/nginx/conf.d/{{ item }} owner=root group=root mode=0644
#   with_items:
#     - "01-corezoid.com.conf"
#     - "superadmin.conf"
#   tags:
#     - capi-all
#     - capi-nginx-setup
#     - capi-nginx-configs
#     - capi-nginx-configs-main

# - name: Create nGinx configs for HCS
#   template: src=templates/{{ corezoid_release }}-{{ item }}.j2 dest=/etc/nginx/conf.d/{{ item }} owner=root group=root mode=0644
#   with_items:
#     - "02-hcs.corezoid.com.conf"
#   when: hc_server_disabled == "false"
#   tags:
#     - capi-all
#     - capi-nginx-setup
#     - capi-nginx-configs

# - name: Create nGinx default configs
#   template: src=templates/{{ item }}.j2 dest=/etc/nginx/conf.d/{{ item }} owner=root group=root mode=0644
#   with_items:
#     - "upstream.conf"
#     - "status.conf"
#   tags:
#     - capi-all
#     - capi-nginx-setup
#     - capi-nginx-configs

# - name: Create nGinx ssl dir
#   file: path={{ nginx_ssl_dir }} owner=root group=root state=directory mode=0755
#   tags:
#     - capi-all
#     - capi-nginx-setup
#     - capi-nginx-setup-ssl

# - name: Copy SSL certificate data
#   copy:
#     content: "{{ nginx_ssl_content }}"
#     dest: "{{ nginx_ssl_filename }}"
#     owner: "root"
#     group: "root"
#     mode: "0600"
#   tags:
#     - capi-all
#     - capi-nginx-setup
#     - capi-nginx-setup-ssl

# - name: Create nGinx ssl conf
#   template: src=templates/{{ item }}.j2 dest={{ nginx_ssl_dir }}/{{ item }} owner=root group=root mode=0600
#   with_items:
#     - "cert-corezoid"
#   tags:
#     - capi-all
#     - capi-nginx-setup
#     - capi-nginx-setup-ssl

# - name: Create nGinx ssl links
#   file: src={{ nginx_ssl_filename }} dest={{ nginx_ssl_dir }}/{{ item }} state=link
#   with_items:
#     - "corezoid.crt"
#     - "corezoid.key"
#   tags:
#     - capi-all
#     - capi-nginx-setup
#     - capi-nginx-setup-ssl

# - name: Create nGinx conf
#   template: src=templates/nginx.conf.j2 dest=/etc/nginx/nginx.conf owner=root group=root mode=0600
#   tags:
#     - capi-all
#     - capi-nginx-setup
#     - capi-nginx-mainconfig

# # - name: Generate /etc/hosts for local HealthCheckServer
# #   template: src=templates/hosts.j2 dest=/etc/hosts owner=root group=root mode=0644
# #   when: hcs_domain == "hcs.corezoid.loc"
# #   tags:
# #     - capi-all
# #     - capi-nginx-setup
# #     - capi-nginx-hosts

# - name: Enable nGinx to survive reboot
#   service:
#     name: nginx
#     state: started
#     enabled: yes
#   tags:
#     - capi-all
#     - capi-nginx-setup
#     - capi-nginx-system

# # - name: Restart nGinx
# #   service:
# #     name: nginx
# #     state: restarted
# #   tags:
# #     - capi-all
# #     - capi-nginx-setup
# #     - capi-nginx-restart
