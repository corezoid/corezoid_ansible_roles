%% -*- mode: erlang;  -*-
[
    {conv_params, [
        {min_version, 2} %% application should deny creating task (copy/rpc) if params are not valid.
                        %% We have in database conveyor table conveyors field version. If version in DB >= min_version in config we run validator else ignore.
    ]},

    {kernel, [
        {inet_dist_listen_min, {{ capi_cluster_port }}},
        {inet_dist_listen_max, {{ capi_cluster_port }}}
    ]},

{% if licence_db_enabled == "true" %}
    {corezoid_license_client, [
       {driver, "db"},
         {pgsql, [
         {host, "{{ db_main.host }}"},
         {user, "{{ db_main.user }}"},
         {dbname, "settings"},
         {password, "{{ db_main.pass }}"}
         ]}
    ]},
{% else %}
    {corezoid_license_client, [
       {driver, "fs"},
         {path_to_license, "{{ top_dir }}/certs/{{ license_file_name }}"}
    ]},
{% endif %}
    {env, [
        {port, 8383},
        {enabled, true}
    ]},

    {gen_rpc, [
       {tcp_server_port, false}
    ]},


    {mw_metrics, [
      {is_enabled, {{ prometheus_metrics | default("false") }} },
      {subsystems, [erlprometheus]}
    ]},

    {erlprometheus, [
      {host, {0,0,0,0}},
      {port, 9100}
    ]},


    %% global_stats
    {corezoid_global_stats, [
        {disabled, true},
        {host, "gs.corezoid.com"},
        {port, 443},
        {send_stat_interval, 60} %% in seconds
    ]},

    {limits_client, [
        {redis, [
{% for item in redis_counters %}
            [
                {host, "{{ item.host }}"},
                {port, {{ item.port }}},
                {database, 11},
                {password,"{{ item.password }}"},
                {start_size, 2},
                {min_size, 2},
                {max_size, 2}
{% if redis_counters.index(item) == redis_counters|length - 1 %}
            ]
{% else %}
            ],
{% endif %}
{% endfor %}
        ]}
    ]},

    {env_var, [

        %% - psql pool -
        {psql, [
            {host, "{{ db_main.host }}"},
            {dbname, "conveyor"},
            {user, "{{ db_main.user }}"},
            {port, 5432},
            {password, "{{ db_main.pass }}"},
            {start_size, 3},
            {min_size, 3},
            {max_size, 30}
        ]}
    ]},

    {dns_cache, [
        {servers, [
{% for item in rmq_core %}
            [
                {name, {{ item.dns_cache_name }}},
                {dns, "{{ item.host }}"},
                {ttl, {{ dns_cache_ttl | default(60) }}}
            ],
{% endfor %}
            [
                {name, {{ rmq_http[0].dns_cache_name }}},
                {dns, "{{ rmq_http[0].host }}"},
                {ttl, {{ dns_cache_ttl | default(60) }}}
            ]
        ]}
    ]},

    {ermql, [

        {publish_request, [
            {servers, [
                [
                    %%{dns_name, {{ rmq_http[0].dns_cache_name}}},
                    {host, "{{ rmq_http[0].host }}"},
                    {port, {{ rmq_http[0].port }}},
                    {username, <<"{{ rmq_http[0].user }}">>},
                    {password, <<"{{ rmq_http[0].pass }}">>},
                    {vhost, <<"{{ rmq_vhost }}">>}
                ]
{% if db_call is defined and db_call %}
                ,[
                    {host, "{{ db_call_host_rmq }}"},
                    {port, {{ rmq[0].port }}},
                    {username, <<"{{ rmq[0].user }}">>},
                    {password, <<"{{ rmq[0].pass }}">>},
                    {vhost, <<"{{ db_call_vhost }}">>},
                    {pools, [dbcall]}
                ]
{% endif %}
{% if db_callv2 is defined and db_callv2 %}
                ,[
                    {host, "{{ db_call_host_rmq }}"},
                    {port, {{ rmq[0].port }}},
                    {username, <<"{{ rmq[0].user }}">>},
                    {password, <<"{{ rmq[0].pass }}">>},
                    {vhost, <<"{{ db_call_vhost }}">>},
                    {pools, [dbcall]}
                ]
{% endif %}
            ]},
            {queues_count, 1},
            {min_size, 1},
            {max_size, 1},
            {start_size, 1}
        ]},

        {consumer_response, [
            {servers, [
                [
                    {host, "{{ rmq_http[0].host }}"},
                    {port, {{ rmq_http[0].port }}},
                    {username, <<"{{ rmq_http[0].user }}">>},
                    {password, <<"{{ rmq_http[0].pass }}">>},
                    {vhost, <<"{{ rmq_vhost }}">>}
                ]
{% if db_call is defined and db_call %}
                ,[
                    {host, "{{ db_call_host_rmq }}"},
                    {port, {{ rmq[0].port }}},
                    {username, <<"{{ rmq[0].user }}">>},
                    {password, <<"{{ rmq[0].pass }}">>},
                    {vhost, <<"{{ db_call_vhost }}">>},
                    {pools, [dbcall]}
                ]
{% endif %}
{% if db_callv2 is defined and db_callv2 %}
                ,[
                    {host, "{{ db_call_host_rmq }}"},
                    {port, {{ rmq[0].port }}},
                    {username, <<"{{ rmq[0].user }}">>},
                    {password, <<"{{ rmq[0].pass }}">>},
                    {vhost, <<"{{ db_call_vhost }}">>},
                    {pools, [dbcall]}
                ]
{% endif %}
            ]},
            {connections_per_queue, 1},
            {channels_per_connection, 1},
            {messages_prefetch_size_per_channel, 50}
        ]}
    ]},

    %% for clustering components
    {corezoid_cluster, [
        {backend, redis}, %% maybe if future list will increase
        {redis, [
            {host, "{{ redis_cache[0].host }}"},
            {port, {{ redis_cache[0].port }}},
            {database, 10},
            {password, "{{ redis_cache_password | default("") }}"}
        ]}
    ]},

    %% merge storage
    {corezoid_global_storage, [
        {backend, redis}, %% maybe if future list will increase
        {redis, [
            {host, "{{ redis_cache[0].host }}"},
            {port, {{ redis_cache[0].port }}},
            {database, 9},
            {password, "{{ redis_cache_password | default("") }}"}
        ]}
    ]},

    {corezoid_queues_gc, [
        {disabled, true},
        {host, "{{ rmq_http[0].host }}"},
        {port, 15672},
        {vhost, "{{ rmq_http[0].vhost }}"},
        {login, "conveyor_gc"},
        {password, "{{ rmq_http[0].pass }}"},
        {gc_queues_regexp, ["api.ctrl", "settings", "conf_agent_client_queue_capi",
                             "ermql_license_distributor_request_capi", "env_vars_queue_capi", "limits_client_queue_capi",
                             "mq_cache_queue_capi", "mw_component_version_client_queue_capi", "mw_dunderdbcall_response_queue_capi"]}
    ]},

    {corezoid_auth_connector, [
        {config_dir, "/ebsmnt/conf/auth_providers"}
    ]},

{% if enigma_is_enabled == "true" %}
    {enigma, [
        {is_enabled, {{ enigma_is_enabled }}},
        {private_key_id, "{{ enigma_private_key_id }}"},
        {key_manager_host, "{{ enigma_key_manager_host }}"},

        {client_cert, "{{ enigma_client_cert }}"},
        {client_key, "{{ enigma_client_key }}"},
        {ca_cert, "{{ enigma_ca_cert }}"},

        {rotors_pool, [
            {min_size, 5},
            {max_size, 5},
            {start_size, 5}
        ]}
    ]},
{% else %}
    {enigma, [
        {is_enabled, {{ enigma_is_enabled }}}
    ]},
{% endif %}

{% if capi_saml is defined and capi_saml %}
    {corezoid_auth_connector, [
        {auth_providers, [
        {okta_saml, [
            {type, saml},
            %% Frontend settings
            {show, true},
            {name, "{{capi_saml_name}}"},
            {login_path, "/auth2/saml/okta_saml"},
            {icon_url, "https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/Okta_logo.svg/1200px-Okta_logo.svg.png"},

            %% Settings for provider (URL or path to file)
            {idp_metadata, "{{capi_saml_idp_metadata}}"},
            %% Should we check signature of entire auth answer from provider
            {idp_signs_envelopes, false},
            %% Should we check assertion (user info) block in auth answer from provider
            {idp_signs_assertions, true},
            %% Should we check metadata file signature
            {idp_signs_metadata, false},
            %% Our identity for provider
            {sp_entity_id, "{{capi_saml_sp_entity_id}}"},
            {sp_consume_url, "{{capi_saml_sp_consume_url}}"},

            %% How we parse assertion in auth answer
            {userinfo_map, [
            {id, subject},
            {email, subject},
            {name, [first_name, last_name]}
            ]}
        ]}
        ]}
    ]},
{% endif %}

    % Send message plugun
    {corezoid_logs_sender, [
        {handlers, [
        ]}
    ]},

{% if merchant_api %}
{% set capi_companies_manager = "mapi" %}
    {merchant_api, [
        {base_url, "{{ merchant_api_base_url }}"},
        {login, "{{ merchant_api_user }}"},
        {secret, "{{ merchant_api_secret }}"},
        {skip_otp, {{ merchant_api_skip_otp }}}
    ]},
{% endif %}

{corezoid_fs, [

    {profiles, [

        %% profile name for market schemas
        [
            {name, market_schemas}, %% Storage for process schemas, stored in marketplace

            %% switch between storages
            {default_file_storage, file_f3},

            %% s3 settings
            %%{amazon_s3, [
            %%    {s3_profile, scheme},
            %%    {opts, [{acl, public_read}, {meta, [{"Cache-Control", "max-age=86400"}]}]},
            %%    {type, <<"role">>}, %% <<"credentials">> (by default) | <<"env">> | <<"role">>
            %%    {bucket, "{{ capi_endpoint }}-scheme"}
            %%]},

            %% f3 file storage settings
            {file_f3,[
                {allowed_namespaces, ["scheme"]},
                {path_to_dir, "{{ top_dir }}/www/market"},
                {network_partition, false},     %% Monitor network share process (if true -> grep {{ top_dir }}/www/market /proc/mounts)
                {ttl_file, 60}                 %% file ttl in seconds
            ]}
        ],

        %% profile name for avatars
        [
            {name, avatars}, %% Storage for users avatars

            %% switch between storages
            {default_file_storage, file_f3},

            %% s3 settings
            %%{amazon_s3, [
            %%    {s3_profile, avatars},
            %%    {opts, [{acl, public_read}]},
            %%    {type, <<"role">>}, %% <<"credentials">> (by default) | <<"env">> | <<"role">>
            %%    {bucket, "{{ capi_endpoint }}-avatars"}
            %%]},

            %% f3 file storage settings
            {file_f3,[
                {allowed_namespaces, ["avatars"]},
                {path_to_dir, "{{ top_dir }}/www/static"},
                {network_partition, false},     %% Monitor network share process (if true -> grep {{ top_dir }}/www/static /proc/mounts)
                {ttl_file, 60}                 %% file ttl in seconds
            ]}
        ]
    ]}
]},

{% if db_call is defined and db_call %}
{mw_db_call, [
    {enabled, true},
    {db_call_host, "{{ db_call_url }}"},
    {request_amqp, [
        {host, <<"{{ db_call_host_rmq }}">>},
        {port, {{ rmq[0].port }}},
        {username, <<"{{ rmq[0].user }}">>},
        {password, <<"{{ rmq[0].pass }}">>},
        {vhost, <<"{{ db_call_vhost }}">>},
        {exchange, <<"db-call">>},
        {is_durable_exchange, true},
        {is_auto_delete_exchange, false},
        {prefetch, 100},
        {is_auto_delete_queue, false},
        {is_durable_queue, true}
    ]},
    {response_amqp, [
        {host, <<"{{ db_call_host_rmq }}">>},
        {port, {{ rmq[0].port }}},
        {username, <<"{{ rmq[0].user }}">>},
        {password, <<"{{ rmq[0].pass }}">>},
        {vhost, <<"{{ db_call_vhost }}">>}
    ]},
    {response_queue, <<"mw_dunderdbcall_response_queue_">>}
]},
{% endif %}

{% if db_callv2 is defined and db_callv2 %}
{mw_db_call, [
    {version, 2},
    {enabled, true},
    {request_amqp_v2, [
        {host, <<"{{ db_call_host_rmq }}">>},
        {port, {{ rmq[0].port }}},
        {username, <<"{{ rmq[0].user }}">>},
        {password, <<"{{ rmq[0].pass }}">>},
        {vhost, <<"{{ db_call_vhost }}">>},
        {exchange, <<"">>}
    ]}
]},
{% endif %}
{capi,
    [
        {api_id, <<"capi-{{ capi_id | default(ansible_default_ipv4.address) }}">>},
        {cookie_expr_time, 846000},
        {prometheus_metrics, {{ prometheus_metrics | default("false") }} },
        {server_port, {{ capi_port }}},
{% if capi_origin_whitelist is defined %}
        {origin_whitelist, [{{ capi_origin_whitelist }}]},
{% endif %}
        {use_limits_from_server, {{ capi_use_limits_from_server | default("false") }}},

{% if capi_auth_single_account is defined and capi_auth_single_account == "true" %}
        {sa_initial_credentials, [
          {name, "corezoid"},
          {redirect_uri, "https://{{ capi_endpoint }}/auth2/single_account/return/"},
          {homepage, "https://{{ capi_endpoint }}"},
          {logo_url, "https://account.corezoid.com/static/corezoid.svg"},
          {description, "Corezoid Process engine"},
          {notify_url, "https://{{ capi_endpoint }}/notify"},
          {full_name, "Corezoid process engine"},
          {capi_site_auth_single_account, true } %% DEFAULT false, On/off sa authorization on corezoid
        ]},
{% endif %}

{% if capi_time_zone_diff is defined %}
        {time_zone_diff, {{ capi_time_zone_diff }}},
{% endif %}
      {max_task_size_for_process_conv, {{ capi_max_task_size_for_process_conv | default(128000) }}}, %% max task size for process conv
      {max_task_size_for_st_diagramm_conv, {{ capi_max_task_size_for_st_diagramm_conv | default(2048) }}}, %% max task size for state diagramm conv
      %% Clearing old processes from the trash in days
      %% {conv_ttl, 0} - keep forever
      {scraper, [
        {conv_scrap_interval, 1}, % Интервал запуска скрипта очистки (1 день)
        {conv_ttl, {{ capi_conv_ttl | default(0) }}}  % Время хранения удаленного процесса (0 - хранить бесконечно)
      ]},
      {api_secret, <<"{{ capi_api_secret }}">>},

      {cookie_name, <<"{{ capi_cookie_name }}">>},
      {shards_count, {{ shards_count}}},

      {companies_manager, {{ companies_manager | default("mapi") }}}, %% mapi

      %% max req/sec of create|modify|delete for conv|folder|dashboard
      %% It will be logged as ->
      %% Ops limit is reached. UserId: 1, Obj: conv, Action: create, Limit: {{ capi_max_reqs_limit }}
      %% End-user will get the error ->
      %% Too many requests: limit is reached
      {max_reqs_limit, {{ capi_max_reqs_limit }}},

      {main_page, "https://{{ capi_endpoint }}"},
      {main_domain, "{{ capi_main_domain }}"},

      {api_host, "https://{{ capi_api_host | default(capi_endpoint) }}/api"},
      {corezoid_auth_hash, <<"{{ capi_auth_hash }}">>},

      {admin_url1, "https://{{ capi_admin_url1 }}"},
      {admin_url2, "https://{{ capi_admin_url2 }}"},

      {email_confirm, {{ capi_email_confirm }}}, %% If true - send info about registration to process
{% if capi_validate_scheme_links is defined %}
      {validate_scheme_links, {{ capi_validate_scheme_links }}},
{% endif %}
{% if db_call or db_callv2 == true and git_call == true and sender_ui == true %}
      {components, [<<"git_call">>, <<"db_call">>, <<"sender">>]}, %% Enabling/disabling components. Uses mostly by frontend
{% elif db_call or db_callv2 == false and git_call == false and sender_ui == false %}
      %%{components, [<<"git_call">>, <<"db_call">>]}, %% Enabling/disabling components. Uses mostly by frontend
{% elif db_call or db_callv2 == false and git_call == true and sender_ui == false %}
      {components, [<<"git_call">>]}, %% Enabling/disabling components. Uses mostly by frontend
{% elif db_call or db_callv2 == true and git_call == false and sender_ui == false %}
      {components, [<<"db_call">>]}, %% Enabling/disabling components. Uses mostly by frontend
{% elif db_call or db_callv2 == false and git_call == true and sender_ui == true %}
      {components, [<<"git_call">>, <<"sender">>]}, %% Enabling/disabling components. Uses mostly by frontend
{% elif db_call or db_callv2 == true and git_call == false and sender_ui == true %}
      {components, [<<"db_call">>, <<"sender">>]}, %% Enabling/disabling components. Uses mostly by frontend
{% elif db_call or db_callv2 == false and git_call == false and sender_ui == true %}
      {components, [<<"sender">>]}, %% Enabling/disabling components. Uses mostly by frontend
{% endif %}

      {cookie, [
          {secure, true}
      ]},

      {check_2fa, false},

      {pg_fdw, [
{% if db_fdw_base is defined %}
        {host, "{{ db_fdw_base }}"}, %% by default host will get from pgsql.host
{% else %}
        %% {host, "localhost"}, %% by default host will get from pgsql.host
{% endif %}
        {reinit_if_changed, true}, %% by default false ( it will drop foreign server and create again )
        {username, "{{ db_fdw_user }}"},
        {password, "{{ db_fdw_user_pass_enc }}"}
      ]},

      %% FRONT SETTINGS
      {front_settings, [
{% if capi_auth_single_account is defined and capi_auth_single_account == "true" %}
        {is_single_account, true},
{% endif %}
        {env, <<"prod">>}, %% Available test|pre|prod
        {host, [
          {site, <<"{{ capi_endpoint }}">>},  %% main page (navigate by clicking on the corezoid logo)
          {doc, <<"doc.corezoid.com">>}, %% documentation (navigate by clicking on DOCS link)
          %%{market, <<"...">>}, %% market (market api call)
          {ws, <<"{{ capi_endpoint }}">>},  %% websocket
          {auth, <<"{{ capi_endpoint }}">> },
{% if capi_auth_single_account is defined and capi_auth_single_account == "true" %}
{% if single_account_location is defined %}
          {base_path, "/account"},
{% endif %}
          {single_account, <<"{{ single_account_domain }}">>}, %% for single account
{% endif %}
          {webhook, <<"{{ capi_endpoint }}">>} %% corezoid domain
        ]},
        {path, [
          {api, <<"/api/2/json">>},
          {upload, <<"/api/2/upload">>},
          {download, <<"/api/2/download">>},
{% if capi_auth_single_account is defined and capi_auth_single_account == "true" %}
          {auth, <<"/auth2/single_account">>},       %% account auth
{% endif %}
          {ws, <<"/api/1/sock_json">>},
          {doc, [
            {index, <<"/docs">>},
            {introduction, <<"/introduction">>},
            {bot_platform, <<"/bot-platform-20">>},
            {task_export, <<"/tasks-export">>},
            {mask_values, <<"/task-parameters#masking-values">>}
          ]},
          {compare, <<"/api/2/compare">>},
          {merge, <<"/api/2/merge">>},
          {webhook, <<"/api/2/">>}
      ]},
      {sender, [
        {host, <<"{{ capi_front_sender_editor_domain }}">>},
        {path, [
          {embed, <<"/embed.js?">>},
          {builder, <<"/builder.html">>}
        ]}
      ]},
      {captcha, [
            {key, <<"{{ capi_front_captcha_key }}">>}, %% key for works with captcha (page /login if corezoid registration)
            {disabled, {{ capi_front_captcha_key_disabled }}}
      ]},
      %{stripe, [
      %    {key, <<"">>},
      %    {client_id, <<"">>}
      %]},
      {ui, [
        {market, {{ capi_front_settings.ui[0].market }}}, %% to Market button
        {company, {{ capi_front_settings.ui[0].company }}}, %% button Create -> Company
        {bot_platform, {{ capi_front_settings.ui[0].bot_platform }}}, %% button Create -> Bot platform
        {old_editor, {{ capi_front_settings.ui[0].old_editor }}}, %% button Old editor
        {search, {{ capi_front_settings.ui[0].search }}}, %% process search
{% if hc_server_disabled is defined and hc_server_disabled == "false" %}
        {health, true}, %% view health link on/off
{% else %}
        {health, false}, %% view health link on/offs
{% endif %}
        {send_invite, {{send_invite}}}, %% send invite
        {billing, {{ capi_front_settings.ui[0].billing }}},
{% if capi_front_settings.ui[0].disabled_auth_logo == "true" %}
        {disabled_auth_logo, true},
{% else %}
        {disabled_auth_logo, false},
{% endif %}
        {default_company, <<"{{ capi_front_settings.ui[0].default_company }}">>},
        {show_welcome_notify, true}               %% show wellcome message
      ]}
    ]},

    {elastic_search, [
{% if capi_es_https is defined %}
        {host, <<"https://{{ capi_es_host }}">>},
        {port, 443},
{% else %}
        {host, <<"http://{{ capi_es_host }}">>},
        {port, 9200},
{% endif %}
        {timeout, 5000}
    ]},

        % PgSQL settings
    {pgsql, [
        {host, "{{ db_main.host }}"},
        {hosts, [
{% for item in db_shards %}
{% if db_shards.index(item) == db_shards|length - 1 %}
            { {{ item.shards }}, "{{ item.host }}" }
{% else %}
            { {{ item.shards }}, "{{ item.host }}" },
{% endif %}
{% endfor %}
        ]},
        {user, "{{ db_main.user }}"},
        {dbname, "conveyor"},
        {password, "{{ db_main.pass }}"},
        {start_size, {{ pg_conn_pool_start | default(5) }}},
        {min_size, {{ pg_conn_pool_min | default(1) }}},
        {max_size, {{ pg_conn_pool_max | default(50) }}},
        {max_overflow_pool_size, 50},
        {dismiss_overflow, false}
    ]},

    % PostgreSQL archive DB
    {pgsql_archive, [
        {hosts, [
{% for item in db_archive_shards %}
{% if db_archive_shards.index(item) == db_archive_shards|length - 1 %}
            { {{ item.shards }}, "{{ item.host }}" }
{% else %}
            { {{ item.shards }}, "{{ item.host }}" },
{% endif %}
{% endfor %}
        ]},
        {user, "{{ db_main.user }}"},
        {password, "{{ db_main.pass }}"},
        {start_size, 5},
        {min_size, 0},
        {max_size, {{ pg_conn_pool_max | default(50) }}}
    ]},

    %% PostgreSQL tasks_history DB
    { pgsql_task_history, [
        {hosts, [
{% for item in db_archive_shards %}
{% if db_archive_shards.index(item) == db_archive_shards|length - 1 %}
            { {{ item.shards }}, "{{ item.host }}" }
{% else %}
            { {{ item.shards }}, "{{ item.host }}" },
{% endif %}
{% endfor %}
        ]},
        {user, "{{ db_main.user }}"},
        {password, "{{ db_main.pass }}"},
        {start_size, {{ pg_conn_pool_start | default(2) }}},
        {min_size, {{ pg_conn_pool_min | default(1) }}},
        {max_size, {{ pg_conn_pool_max | default(50) }}}
    ]},

    {write_data_to_history, {{ worker_write_data_to_history | default("false") }}}, %% true|false - write or not tasks data into table, default - false

    {pgsql_cce_temp, [
        {host, "{{ db_main.host }}"},
        {user, "{{ db_main.user }}"},
        {db_name, "cce"},
        {password, "{{ db_main.pass }}"},
        {min_size, 0},
        {max_size, 50},
        {start_size, 2}
    ]},

    %% database for git call
    {pgsql_git_call, [
        {host, "{{ db_main.host }}"},
        {user, "{{ db_main.user }}"},
        {db_name, "{{ git_call_dbname }}"},
        {password, "{{ db_main.pass }}"},
        {min_size, 0},
        {max_size, 1},
        {start_size, 1}
    ]},

    {pgsql_extra, []},

    {kernel, [
        {inet_dist_listen_min, 52617},
        {inet_dist_listen_max, 52617}
    ]},

    % counters and sum-s
    {redis1, [
{% for item in redis_counters %}
        [
            {host, "{{ item.host }}"},
            {port, {{ item.port }}},
            {database,{{ item.db }}},
            {password,"{{ item.password }}"},
            {start_size, 10},
            {min_size, 0},
            {max_size, 100}
{% if redis_counters.index(item) == redis_counters|length - 1 %}
        ]
{% else %}
        ],
{% endif %}
{% endfor %}
    ]},

    %% memory redis for cache task
    {redis2, [
{% for item in redis_cache %}
      [
        {host, "{{ item.host }}"},
        {port, {{ item.port }}},
        {database,{{ item.db }}},
        {password,"{{ item.password }}"},
        {start_size, {{ capi_redis2_start_size | default(50) }}},
        {min_size, {{ capi_redis2_min_size | default(50) }}},
        {max_size, {{ capi_redis2_max_size | default(50) }}}
{% if redis_cache.index(item) == redis_cache|length - 1 %}
      ]
{% else %}
      ],
{% endif %}
{% endfor %}
    ]},

    %% For api_sum
    {redis_api_sum, [
{% for item in redis_api_sum %}
        [
            {host, "{{ item.host }}"},
            {port, {{ item.port }}},
            {database,{{ item.db }}},
            {password,"{{ item.password }}"},
            {start_size, 10},
            {min_size, 10},
            {max_size, 100}
{% if redis_api_sum.index(item) == redis_api_sum|length - 1 %}
        ]
{% else %}
        ],
{% endif %}
{% endfor %}
    ]},

    %% Redis for delete users queue. Can be used redis for counters but with a different database.
    {redis_users, [
{% for item in redis_users %}
        [
            {host, "{{ item.host }}"},
            {port, {{ item.port }}},
            {database, {{ item.db }}},
            {password,"{{ item.password }}"},
            {start_size, 1},
            {min_size, 1},
            {max_size, 1}
{% if redis_users.index(item) == redis_users|length - 1 %}
        ]
{% else %}
        ],
{% endif %}
{% endfor %}
    ]},

    % to_worker mq
    {publish_to_worker_request, [
        {servers, [
{% for item in rmq_core %}
            { {{ item.shards }} , [
{% if rmq_host_dns_name is defined %}
                {dns_name, {{ item.dns_cache_name }}}
                %%{host, "{{ item.host }}"}
{% else %}
                %%{dns_name, {{ item.dns_cache_name }}}
                {host, "{{ item.host }}"}
{% endif %}
            ]
{% if rmq_core.index(item) == rmq_core|length - 1 %}
            }
{% else %}
            },
{% endif %}
{% endfor %}
        ]},
        {port, {{ rmq_port }}},
        {username, <<"{{ rmq_user }}">>},
        {password, <<"{{ rmq_user_pass }}">>},
        {vhost, <<"{{ rmq_vhost }}">>},
        {min_size, {{ pub_to_worker_pool_min | default(5) }}},
        {max_size, {{ pub_to_worker_pool_max | default(5) }}},
        {start_size, {{ pub_to_worker_pool_start | default(5) }}}
    ]},

    % api copy queue (support multiply consumers)
    {consumer_copy_task_request,[
        {servers, [
{% for item in rmq_core %}
            [
{% if rmq_host_dns_name is defined %}
                {dns_name, {{ item.dns_cache_name }}},
                %%{host, "{{ item.host }}"}
{% else %}
                %%{dns_name, {{ item.dns_cache_name }}}
                {host, "{{ item.host }}"},
{% endif %}
                {port, {{ item.port }}},
                {username, <<"{{ item.user }}">>},
                {password, <<"{{ item.pass }}">>},
                {vhost, <<"{{ rmq_vhost }}">>}
{% if rmq_core.index(item) == rmq_core|length - 1 %}
            ]
{% else %}
            ],
{% endif %}
{% endfor %}
        ]},
        {port, {{ rmq_port }}},
        {username, <<"{{ rmq_user }}">>},
        {password, <<"{{ rmq_user_pass }}">>},
        {vhost, <<"{{ rmq_vhost }}">>},

        {queues_count, 1},
        {connections_per_queue, 1},
        {channels_per_connection, 1},
        {messages_prefetch_size_per_channel, {{ capi_consumer_copy_task_request_messages_prefetch_size_per_channel | default(10) }}}
    ]},

    % api get_task queue (support multiply consumers)
    {consumer_get_task_request,[
        {servers, [
{% for item in rmq_core %}
            [
{% if rmq_host_dns_name is defined %}
                {dns_name, {{ item.dns_cache_name }}},
                %%{host, "{{ item.host }}"},
{% else %}
                %%{dns_name, {{ item.dns_cache_name }}},
                {host, "{{ item.host }}"},
{% endif %}
                {port, {{ item.port }}},
                {username, <<"{{ item.user }}">>},
                {password, <<"{{ item.pass }}">>},
                {vhost, <<"{{ rmq_vhost }}">>}
{% if rmq_core.index(item) == rmq_core|length - 1 %}
            ]
{% else %}
            ],
{% endif %}
{% endfor %}
        ]},
        {port, {{ rmq_port }}},
        {username, <<"{{ rmq_user }}">>},
        {password, <<"{{ rmq_user_pass }}">>},
        {vhost, <<"{{ rmq_vhost }}">>},
        {order_by, true},
        {queues_count, 1},
        {connections_per_queue, 1},
        {channels_per_connection, 1},
        {messages_prefetch_size_per_channel, 50}
    ]},

    {publish_user_actions_request, [
      {servers, [[
        %%{dns_name, name5},
        {host, "{{ rmq_http[0].host }}"},
        {port, {{ rmq_http[0].port }}},
        {username, <<"{{ rmq_http[0].user }}">>},
        {password, <<"{{ rmq_http[0].pass }}">>},
        {vhost, <<"{{ rmq_vhost }}">>}
      ]]},
      {queues_count, 1},
      {min_size, 2},
      {max_size, 2},
      {start_size, 2}
    ]},

    {consumer_user_actions_request, [
      {servers, [[
        %{dns_name, name5},
        {host, "{{ rmq_http[0].host }}"},
        {port, {{ rmq_http[0].port }}},
        {username, <<"{{ rmq_http[0].user }}">>},
        {password, <<"{{ rmq_http[0].pass }}">>},
        {vhost, <<"{{ rmq_vhost }}">>}
      ]]},
      {queues_count, 1},
      {connections_per_queue, 1},
      {channels_per_connection, 2},
      {messages_prefetch_size_per_channel, 50}
    ]},

    %% deprecated
    {consumer_notify_actions_request, [
      {servers, [[
        %%{dns_name, name5},
        {host, "{{ rmq_http[0].host }}"},
        {port, {{ rmq_http[0].port }}},
        {username, <<"{{ rmq_http[0].user }}">>},
        {password, <<"{{ rmq_http[0].pass }}">>},
        {vhost, <<"{{ rmq_vhost }}">>}
      ]]},
      {queues_count, 1},
      {connections_per_queue, 1},
      {channels_per_connection, 2},
      {messages_prefetch_size_per_channel, 50}
    ]},

    %% consumer for multipart-worker
    {consumer_multipart_connector_request, [
      {servers, [[
        %%{dns_name, name5},
        {host, "{{ rmq_http[0].host }}"},
        {port, {{ rmq_http[0].port }}},
        {username, <<"{{ rmq_http[0].user }}">>},
        {password, <<"{{ rmq_http[0].pass }}">>},
        {vhost, <<"{{ rmq_vhost }}">>}
      ]]},
      {queues_count, 1},
      {connections_per_queue, 1},
      {channels_per_connection, 2},
      {messages_prefetch_size_per_channel, 50}
    ]},

    %% work with elastic
    {publish_elastic_actions_request, [
      %%{dns_name, name5},
      {host, "{{ rmq_http[0].host }}"},
      {port, {{ rmq_http[0].port }}},
      {username, <<"{{ rmq_http[0].user }}">>},
      {password, <<"{{ rmq_http[0].pass }}">>},
      {vhost, <<"{{ rmq_vhost }}">>},
      {queues_count, 1},
      {min_size, 2},
      {max_size, 2},
      {start_size, 2}
    ]},

    %% work with elastic
    {consumer_elastic_actions_request, [
      %%{dns_name, name5},
      {host, "{{ rmq_http[0].host }}"},
      {port, {{ rmq_http[0].port }}},
      {username, <<"{{ rmq_http[0].user }}">>},
      {password, <<"{{ rmq_http[0].pass }}">>},
      {vhost, <<"{{ rmq_vhost }}">>},
      {queues_count, 1},
      {connections_per_queue, 1},
      {channels_per_connection, 2},
      {messages_prefetch_size_per_channel, 50}
    ]},

    %% продюсер настроек
    {publish_settings, [
      {servers, [[
        %%{dns_name, name5},
        {host, "{{ rmq_http[0].host }}"},
        {port, {{ rmq_http[0].port }}},
        {username, <<"{{ rmq_http[0].user }}">>},
        {password, <<"{{ rmq_http[0].pass }}">>},
        {vhost, <<"{{ rmq_vhost }}">>}
      ]]},
      {min_size, 1},
      {max_size, 1},
      {start_size, 1}
    ]},

    %% консьюмер настроек
    {consumer_settings, [
      {servers, [[
        %%{dns_name, name5},
        {host, "{{ rmq_http[0].host }}"},
        {port, {{ rmq_http[0].port }}},
        {username, <<"{{ rmq_http[0].user }}">>},
        {password, <<"{{ rmq_http[0].pass }}">>},
        {vhost, <<"{{ rmq_vhost }}">>}
      ]]},
      {connections_per_queue, 1},
      {channels_per_connection, 1},
      {messages_prefetch_size_per_channel, 50}
    ]},

    %% Statistics consumer
    {consumer_statistics, [
      {servers, [[
        %%{dns_name, name5},
        {host, "{{ rmq_http[0].host }}"},
        {port, {{ rmq_http[0].port }}},
        {username, <<"{{ rmq_http[0].user }}">>},
        {password, <<"{{ rmq_http[0].pass }}">>},
        {vhost, <<"{{ rmq_vhost }}">>}
      ]]},
      {connections_per_queue, 1},
      {channels_per_connection, 1},
      {messages_prefetch_size_per_channel, 1}
    ]},

    % ldap auth settings
    {ldap, [
        {server, "{{ capi_ldap_host }}"},
        {port, {{ capi_ldap_port }}}, %% port, if use tls then add {tls, true},
{% if capi_ldap_tls == "true" %}
        {tls, true}, %% true | false
{% endif %}
        {base, "{{ capi_ldap_base }}"}, %% ou=special users,o=middleware
        {filter, "{{ capi_ldap_filter }}"}, %% uid | cn | something_else
        {first_bind_user, {{ capi_ldap_first_bind_user }}}, %% then this param is true, bind_user_name, bind_user_pass should be filled. if it's false it is not necessary
        {bind_user_name, "{{ capi_ldap_bind_user_name }}"}, %% can be like this "cn=middleware,ou=DHO,ou=fuib,dc=fuib,dc=com"
        {bind_user_pass, "{{ capi_ldap_bind_user_pass }}"},
        {user_nick_entry, "{{ capi_ldap_user_nick_entry }}"} %% ldap nick name path, display in right corner
    ]},

    {oauth_pb, [
        {client_id, "{{ capi_oauth_pb_client_id }}"},
        {client_secret, "{{ capi_oauth_pb_client_secure }}"},
        {return_url, "https://{{ capi_endpoint }}"},
        {oauth_url, "{{ capi_oauth_pb_oauth_url }}"},
        {token_url, "{{ capi_oauth_pb_token_url }}"},
        {userinfo_url, "{{ capi_oauth_pb_userinfo_url }}"},
        {logout_url, "{{ capi_oauth_pb_logout_url }}"},
        {isauthorize_url, "{{ capi_oauth_pb_isauthorize_url }}"}
    ]},

    % site settings
    {site, [
      %{cache, true},
      {title, <<"{{ capi_endpoint }}">>},
      {site, <<"{{ capi_endpoint }}">>},
      {oauth_pb, {{ capi_oauth_pb }}},
      {auth_ldap, {{ capi_auth_ldap }}}, %% allows to connect via other ldap account. true | false
      {auth_google, {{ capi_auth_google }}}, %% allows to connect via google account. true | false
      {corezoid_auth, {{ capi_corezoid_auth }}}, %% allows to connect via corezoid account. true | false
      {box_solution, {{ capi_box_solution }}}, %% true | false. When box_solution is false -> we can't create companies
      {files_repository, redis_cache}, %% redis | amazon_s3
      {api_max_threads, {{ capi_api_max_threads }}}, %% max allowed threads for api logic
      {first_day_of_week, mon}, %% mon|sun|sat "mon" by default
      {auth_single_account, {{ capi_auth_single_account }}}
    ]},

    {backend_settings, [
%%      {captcha, [
%%        {key, <<"{{ capi_backend_settings_cpatcha_key }}">>},
%%        {verify_url, "https://www.google.com/recaptcha/api/siteverify"},
%%        {disabled, {{ capi_backend_settings_cpatcha_disabled }}}
%%      ]}
      {captcha,
       [
         {provider, recaptcha},
         {key, <<"{{ capi_backend_settings_cpatcha_key }}">>},
         {disabled, {{ capi_backend_settings_cpatcha_disabled }}}
       ]
%%       [
%%         {provider, hcaptcha},
%%         {key, <<"{{ capi_backend_settings_cpatcha_key }}">>},  %% Test key
%%         {disabled, {{ capi_backend_settings_cpatcha_disabled }}}
%%       ]
      }
    ]},
{% if capi_super_admin_id is defined %}
    % group for super_users
    {super_admin_id, {{ capi_super_admin_id }}},
{% endif %}
{% if capi_servise_desk_id is defined %}
    % group for support
    {servise_desk_id, {{ capi_servise_desk_id }}},
{% endif %}
{% if capi.user_notify_conv is defined %}
    {user_notify_conv, {{ capi.user_notify_conv }}}, %% for register_events
{% endif %}
{% if capi.payment_logs is defined %}
    {payment_logs, {{ capi.payment_logs }}}, %% for stripe webhooks events
{% endif %}
{% if capi.user_story_conv is defined %}
    {user_story_conv, {{ capi.user_story_conv }}}, %% for first action by user
{% endif %}
{% if capi.capi_conv_logs is defined %}
    {conv_logs, [{{ capi.capi_conv_logs }}]}, %% conv_id for logs
{% endif %}
{% if capi.user_activity_conv is defined %}
    {user_activity_conv, {{ capi.user_activity_conv }}}, %%conv_id for log user activity
{% endif %}
{% if capi.bot_wizzard_conv is defined %}
    {bot_wizzard_conv, {{ capi.bot_wizzard_conv }}}, %%conv_id for bot_wizzard
{% endif %}
{% if capi.register_event_process is defined %}
    {register_event_process, {{ capi.register_event_process }}}, %% for first action by user
{% endif %}
{% if capi.external_system_register_event_process is defined %}
    {external_system_register_event_process, {{ capi.external_system_register_event_process }}}, %% for register_events by external system
{% endif %}
{% if capi.login_logout_conv is defined %}

    %% login/logout action. It needs for market application to invalidate cache
    %% If user wants to logout from corezoid from market application he/she logouts too.
    {login_logout_conv, {{ capi.login_logout_conv }}},
{% endif %}
{% if capi_allowed_domains is defined %}
    {allowed_domains, [{{ capi_allowed_domains }}]},
{% endif %}
    %% messengers mode on
{% if capi_telegram %}
    {telegram_url, "{{ capi_telegram_url }}"},
    {telegram_conv, {{ capi_telegram_conv }}}, %% conv_id for telegramm messager
{% endif %}
    %% messengers mode off

    %% ???
{% if capi_block_unblock_notify_conv_check | default(false) %}
    {block_unblock_notify_conv, {{ capi_block_unblock_notify_conv }}}, %% notifying block and unblock process
{% endif %}
{% if capi_check_api_info_group is defined %}
    {check_api_info_group, {{ capi_check_api_info_group }}}, %% for {"type":"show", "obj":"login"} requests
{% endif %}
{% if capi_check_privs_group is defined %}
    {check_privs_group, {{ capi_check_privs_group }}}, %% for sync_api
{% endif %}

    {zabbix, [
      {server, "localhost"},
      {src_host, "corezoid"},
      {send_interval, 5},
      {disabled, true}
    ]},

{% if capi_sender == "on" %}
    {sender, [
      %% sender communication
      {sender_build_form_url, "{{ capi_sender_build_form_url }}"}, %% for build form url
      {sender_build_action_url, "{{ capi_sender_build_action_url }}"}, %% for action url
      {sender_call_action_url, "{{ capi_sender_call_action_url }}"}, %% for call action url
      {sender_secret, <<"{{ capi_sender_secret }}">>},
      {sender_plugin_secret, <<"{{ capi_sender_plugin_secret }}">>},
      {sender_max_threads, {{ capi_sender_max_threads }}},
      {sender_env, <<"{{ capi_sender_env }}">>}
    ]},
{% endif %}

    % api limit counters by user_id
    {user_limits, [
      {max_interface_rate, {{ capi_user_limits_max_interface_rate | default(100) }}},  %% default limit interface requests, ban after for 1 min
      {max_user_rate, {{ capi_user_limits_max_user_rate | default(200) }}}         %% default limit for task create/modify, other will get 429 error
{% if capi_user_limits is defined %}
,
{% for item in capi_user_limits %}
      {% raw %}{{% endraw %}{{ item.user_id }}, {{ item.user_limit }}{% raw %}}{% endraw %}{% if capi_user_limits.index(item) == capi_user_limits|length - 1 %} {% else %},{% endif %} %%{{ item.comment }}
{% endfor %}
{% endif %}

    ]},

    {logic_settings, [
        {api, [
            {max_threads, {{ capi_api_max_threads | default(200) }}}
        ]},
        {sender_api, [
            {max_threads, {{ capi_sender_max_threads | default(25) }}}
        ]},
        {timer, [
            {default, [
                {timer_min, {{ capi_timer_min | default(30) }}}
            ]}
        ]}
    ]}
]},

{zabbix_sender, [
    {zabbix_host, "localhost"},
    {zabbix_port, 10051},
    {nodename, "corezoid"},
    {disabled, true}
]},

{lager, [
%% What handlers to install with what arguments (wrapped by middleman)

    {log_root, "{{ top_dir }}/erlang/{{ item }}/log"},
    {handlers, [
        {lager_console_backend, [{level, info}]},
        {lager_file_backend, [{file, "error.log"}, {level, error}, {size, 734003200}, {date, "$D0"}, {count, 5}]},
        {lager_file_backend, [{file, "console.log"}, {level, info}, {size, 734003200}, {date, "$D0"}, {count, 5}]}
    ]},
    %% What colors to use with what log levels
    {colored, true},
    {colors, [
        {debug,     "\e[0;38m" },
        {info,      "\e[1;37m" },
        {notice,    "\e[1;36m" },
        {warning,   "\e[1;33m" },
        {error,     "\e[1;31m" },
        {critical,  "\e[1;35m" },
        {alert,     "\e[1;44m" },
        {emergency, "\e[1;41m" }
    ]},
    %% Whether to write a crash log, and where. Undefined means no crash logger.
    {crash_log, "crash.log"},
    %% Maximum size in bytes of events in the crash log - defaults to 65536
    {crash_log_msg_size, 65536},
    %% Maximum size of the crash log in bytes, before its rotated, set
    %% to 0 to disable rotation - default is 0
    {crash_log_size, 10485760},
    %% What time to rotate the crash log - default is no time
    %% rotation. See the README for a description of this format.
    {crash_log_date, "$D0"},
    %% Number of rotated crash logs to keep, 0 means keep only the
    %% current one - default is 0
    {crash_log_count, 5},
    %% Whether to redirect error_logger messages into lager - defaults to true
    {error_logger_redirect, true},
    %% How many messages per second to allow from error_logger before we start dropping them
    {error_logger_hwm, 50},
    %% How big the gen_event mailbox can get before it is switched into sync mode
    {async_threshold, 20},
    %% Switch back to async mode, when gen_event mailbox size decrease from `async_threshold'
    %% to async_threshold - async_threshold_window
    {async_threshold_window, 5}
]},

{% if hc_server_disabled == "false" %}
%% Client for server healthcheck
{hcheck_sender, [
    {host, <<"{{ hc_server_host }}">>}, %% host of the remote healthcheck server
    {port, {{ hc_server_port }}}, %% port of the remote healthcheck server
    {node_name, <<"capi-{{ capi_id | default(ansible_default_ipv4.address) }}">> }, %% different for each node
    {node_type, <<"capi">> }, %% capi | worker | multipart | http_worker | usercode | deepmemo ...
    {disabled, {{ hc_server_disabled }}}, %% true by default
    {send_interval_sec, {{ hc_server_send_interval_sec | default(30) }}}, %% by default 10 sec
    {send_system_counters, true} %% memory processes etc, false by default
]},
{% else %}
{hcheck_sender, [
    {disabled, {{ hc_server_disabled }}} %% true by default
]},
{% endif %}

{corezoid_sdk, [
    {host, "{{ capi_admin_url1 }}"},
    {scheme, "https://"}
]},

{% if capi_auth_single_account is defined and capi_auth_single_account == "true" %}
{account_sdk, [
    {pool, [
{% if single_account_location is defined %}
      %%{host, "{{ single_account_domain }}"},
        {host, "{{ capi_endpoint }}"},
{% else %}
        {host, "{{ single_account_domain }}"},
{% endif %}
        {port, 443},
        {start_size, 5},
        {min_size, 5},
        {max_size, 5}
    ]},
    {redis, [
      [
        {host, "{{ redis_cache[0].host }}"},
        {port, {{ redis_cache[0].port }}},
        {database, 5},
        {password, "{{ redis_cache_password | default("") }}"},
        {min_size, 1},
        {max_size, 10},
        {start_size, 1}
      ]
    ]},
    {disabled, false},
{% if single_account_location is defined %}
    {base_path, "/account"},
{% endif %}
    {client_id, "{{ single_account_client_id }}"},
    {client_secret, "{{ single_account_client_secret }}"},
    {oauth_url, "https://{{ single_account_domain }}/oauth2/authorize"},
    {token_url, "https://{{ single_account_domain }}/oauth2/token"},
{% if single_account_location is defined %}
    {return_url, "https://{{ capi_endpoint }}/auth2/single_account/return/"},
{% else %}
    {return_url, "https://{{ capi_endpoint }}/auth2/single_account/return"},
{% endif %}
    {userinfo_url, "https://{{ single_account_domain }}/oauth2/userinfo?access_token="}
]}
{% else %}
{account_sdk, [
    {disabled, true}
]}
{% endif %}

].
