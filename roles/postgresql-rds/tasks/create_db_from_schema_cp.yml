---
# PostgreSQL Shard Database Configuration and Schema Deployment
# Handles schema deployment and permissions for sharded database instances
# Configures extensions and access privileges for shard databases

# Set schema file paths for shard databases
# Determines the SQL file path for shard database configuration
- name: set name for the shard's sql file
  set_fact:
    local_db_schema: "{{ schema_path }}/{{ schema_path_suffix }}/{{ corezoid_release }}/init/cp.sql"
    remote_db_schema: "/tmp/cp.sql"
  when: local_db | regex_replace('[0-9]+$', '') == 'cp'
  tags:
    - debug-tunnel-var
    - pgsql-all
    - pgsql-deploy-schema

# Configure schema path for SSH tunnel
# Sets up schema path for remote deployment
- name: set schema name for ssh_tunnel
  set_fact:
    db_schema: "{{ local_db_schema }}"
  tags:
    - pgsql-all
    - pgsql-deploy-schema

# Debug schema path configuration
# Displays selected schema path for verification
- debug: msg={{ db_schema }}

# Verify database table existence
# Checks if any tables exist in the target shard database
- name: ensure tables exist in {{ local_db }}
  shell: PGPASSWORD={{ db_superuser_password_enc }} psql -h {{ db_shards_rds.host }} -p {{ db_main.port }} -U {{ db_superuser_login }} {{ local_db }} -Atc "SELECT COUNT(1) FROM pg_stat_user_tables"
  register: check_db_tables
  tags:
    - pgsql-all
    - pgsql-deploy-schema

# Deploy shard database schema
# Applies SQL schema to empty shard databases only
- name: deploy db schema for {{ local_db }}
  shell: PGPASSWORD={{ db_superuser_password_enc }} psql -h {{ db_shards_rds.host }} -p {{ db_main.port }} -U {{ db_superuser_login }} {{ local_db }} -f {{ db_schema }}
  when:
    - check_db_tables.stdout == "0"
    - check_db_tables.rc == 0
  register: result
  tags:
    - pgsql-all
    - pgsql-deploy-schema

# Set shard database privileges
# Configures access permissions for different user roles
- name: grant privileges on all tables in {{ local_db }}
  postgresql_privs: >
    db={{ local_db }}
    privs={{ item.privs }}
    objs=ALL_IN_SCHEMA
    schema=public
    type={{ item.obj_type }}
    role={{ item.name }}
    host={{ db_shards_rds.host }}
    login_user={{ db_superuser_login }}
    login_password={{ db_superuser_password }}
    port={{ db_main.port }}
    grant_option=no
  with_items:
    - { name: "appusers", obj_type: "table", privs: "SELECT,INSERT,UPDATE,DELETE" }
    - { name: "appusers", obj_type: "sequence", privs: "SELECT,UPDATE" }
    - { name: "viewers", obj_type: "table", privs: "SELECT" }
    - { name: "viewers", obj_type: "sequence", privs: "SELECT" }
  tags:
    - pgsql-all
    - pgsql-deploy-schema

# Enable PostgreSQL foreign data wrapper
# Installs postgres_fdw extension for cross-database queries
- name: create extension postgres_fdw
  shell: PGPASSWORD={{ db_superuser_password_enc }} psql -h {{ db_shards_rds.host }} -p {{ db_main.port }} -U {{ db_superuser_login }} {{ local_db }} -Atc "CREATE extension IF NOT EXISTS postgres_fdw;"
  tags:
    - pgsql-all
    - pgsql-deploy-schema

# Enable cryptographic functions and update UUIDs
# Installs pgcrypto and updates duplicate UUIDs in nodes and charts
- name: create extension pgcrypto
  shell: PGPASSWORD={{ db_superuser_password_enc }} psql -h {{ db_shards_rds.host }} -p {{ db_main.port }} -U {{ db_superuser_login }} {{ local_db }} -Atc "CREATE EXTENSION IF NOT EXISTS pgcrypto; with q As (select id, count(*) over (partition by conveyor_id, uuid) as c from nodes), q1 AS( select * from q WHERE c>1) UPDATE nodes SET uuid = gen_random_uuid() FROM q1 WHERE nodes.id = q1.id; with q As (select id, count(*) over (partition by dashboard_id, uuid) as c from charts), q1 AS (select * from q WHERE c>1) UPDATE charts SET uuid = gen_random_uuid() FROM q1 WHERE charts.id = q1.id;"
  tags:
    - pgsql-all
    - pgsql-deploy-schema

# Grant FDW usage to main user
# Enables foreign data wrapper access for the main database user
- name: GRANT postgres_fdw
  shell: PGPASSWORD={{ db_superuser_password_enc }} psql -h {{ db_shards_rds.host }} -p {{ db_main.port }} -U {{ db_superuser_login }} {{ local_db }} -Atc "GRANT USAGE ON FOREIGN DATA WRAPPER postgres_fdw TO {{ db_main.user }}"
  tags:
    - pgsql-all
    - pgsql-deploy-schema

# Grant FDW usage to application users
# Enables foreign data wrapper access for application users
- name: GRANT postgres_fdw appusers {{ local_db }}
  shell: PGPASSWORD={{ db_superuser_password_enc }} psql -h {{ db_shards_rds.host }} -p {{ db_main.port }} -U {{ db_superuser_login }} {{ local_db }} -Atc "GRANT USAGE ON FOREIGN DATA WRAPPER postgres_fdw TO appusers"
  tags:
    - pgsql-all
    - pgsql-deploy-schema

# Grant schema privileges to application users
# Provides full schema access to application users
- name: GRANT ALL PRIVILEGES appusers {{ local_db }}
  shell: PGPASSWORD={{ db_superuser_password_enc }} psql -h {{ db_shards_rds.host }} -p {{ db_main.port }} -U {{ db_superuser_login }} {{ local_db }} -Atc "GRANT ALL PRIVILEGES ON SCHEMA public TO appusers;"
  tags:
    - pgsql-all
    - pgsql-deploy-schema

# Grant table privileges to application users
# Provides CRUD operations access on all tables
- name: GRANT ALL TABLES appusers {{ local_db }}
  shell: PGPASSWORD={{ db_superuser_password_enc }} psql -h {{ db_shards_rds.host }} -p {{ db_main.port }} -U {{ db_superuser_login }} {{ local_db }} -Atc "GRANT SELECT,INSERT,UPDATE,DELETE ON ALL TABLES IN SCHEMA public TO appusers;"
  tags:
    - pgsql-all
    - pgsql-deploy-schema

# Grant sequence privileges to application users
# Provides access to all sequences for ID generation
- name: GRANT ALL SEQUENCES appusers {{ local_db }}
  shell: PGPASSWORD={{ db_superuser_password_enc }} psql -h {{ db_shards_rds.host }} -p {{ db_main.port }} -U {{ db_superuser_login }} {{ local_db }} -Atc "GRANT SELECT,UPDATE ON ALL SEQUENCES IN SCHEMA public TO appusers;"
  tags:
    - pgsql-all
    - pgsql-deploy-schema