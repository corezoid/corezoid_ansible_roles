# Set service name as a fact for consistent usage
- name: Set service name variable
  set_fact:
    service_name: "corezoid_limits"
  tags:
    - always

# Clean YUM cache to ensure fresh package metadata
# Removes all cached package data to prevent installation issues and ensure clean state
- name: Yum clean all
  command: yum clean all
  #  args:
  #    warn: false
  tags:
    - corezoid_limits-all
    - corezoid_limits-app
    - corezoid_limits-install

# Install Corezoid Limits package
# Installs or updates the corezoid_limits package from AWS Corezoid repository with specific version
- name: Install package corezoid_limits
  yum:
    name: "{{ service_name }}-{{ corezoid_release_app_version.corezoid_limits }}"
    state: present
    update_cache: yes
    disablerepo: "*"
    enablerepo: "aws-corezoid"
  tags:
    - corezoid_limits-all
    - corezoid_limits-app
    - corezoid_limits-install


# Create all required directories in a single task using a loop
- name: Create application directories
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    state: directory
    mode: "{{ item.mode }}"
    recurse: "{{ item.recurse }}"
  loop:
    - { path: "{{ top_dir }}/erlang/{{ service_name }}/log", owner: "{{ app_user }}", group: "{{ app_user }}", mode: "0700", recurse: no }
    - { path: "{{ top_dir }}/erlang/{{ service_name }}", owner: "{{ app_user }}", group: "{{ app_user }}", mode: "0700", recurse: yes }
  tags:
    - corezoid_limits-all
    - corezoid_limits-install

# Generate Corezoid Limits configuration file
# Creates the main configuration file from template with proper settings
- name: Create corezoid_limits config file
  template: src=templates/{{ corezoid_release }}-{{ service_name }}.config.j2 dest={{ corezoid_limits_config }} owner={{ app_user }} group={{ app_user }} mode=0500
  tags:
    - corezoid_limits-all
    - corezoid_limits-app
    - corezoid_limits-config-file

# Enable and start Corezoid Limits service
# Ensures the service starts automatically on boot and is running
- name: Enable corezoid_limits to survive reboot
  service:
    name: "{{ service_name }}"
    enabled: yes
    state: started
  tags:
    - corezoid_limits-all
    - corezoid_limits-app
    - corezoid_limits-start

# Create Monit monitoring configuration
# Sets up monitoring for the Corezoid Limits service
- name: Create monit file
  template: src=templates/{{ item }}.monit.j2 dest=/etc/monit.d/{{ item }} owner=root group=root mode=0600
  with_items:
    - corezoid_limits
  register: monit_file
  tags:
    - corezoid_limits-all
    - corezoid_limits-app
    - corezoid_limits-monit

# Reload Monit configuration
# Applies any changes to the Monit monitoring setup if configuration was modified
- name: Reload monit if config file changed
  service:
    name: monit
    state: reloaded
  when: monit_file.changed
  tags:
    - corezoid_limits-all
    - corezoid_limits-app
    - corezoid_limits-monit
