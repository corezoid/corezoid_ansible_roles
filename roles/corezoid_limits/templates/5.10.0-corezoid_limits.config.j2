[

    %% license client
    {corezoid_license_client, [
        {path_to_license, "{{ top_dir }}/certs/{{ license_file_name }}"}
    ]},

    %% dns cache. Support multiply dnses cache
    %% name - unical name will be able to use in publish/consumer rabbitmq instead of server name
    %% dns - DNS name
    %% ns - NS name
    %% ttl - auto reload info from DNS server (in seconds)
    {dns_cache, [
        {servers, [
{% for item in rmq_core %}
            [
                {name, {{ item.dns_cache_name }}},
                {dns, "{{ item.host }}"},
                {ttl, {{ dns_cache_ttl | default(60) }}}
            ],
{% endfor %}
            [
                {name, {{ rmq_http[0].dns_cache_name }}},
                {dns, "{{ rmq_http[0].host }}"},
                {ttl, {{ dns_cache_ttl | default(60) }}}
            ]
        ]}
    ]},

    %% for clustering components
    {corezoid_cluster, [
        {backend, redis}, %% maybe if future list will increase
        {redis, [
            {host, "{{ redis_cache[0].host }}"},
            {port, {{ redis_cache[0].port }}},
            {database, 10},
            {password, "{{ redis_cache_password | default("") }}"}
        ]}
    ]},

    {ermql, [

        {publish_request, [
            {servers, [
                [
                    %%{dns_name, {{ rmq_http[0].dns_cache_name }}},
                    {host, "{{ rmq_http[0].host }}"},
                    {port, {{ rmq_http[0].port }}},
                    {username, <<"{{ rmq_http[0].user }}">>},
                    {password, <<"{{ rmq_http[0].pass }}">>},
                    {vhost, <<"{{ rmq_vhost }}">>}
                ]
            ]},
            {queues_count, 1},
            {min_size, 1},
            {max_size, 1},
            {start_size, 1}
        ]},

        {consumer_response, [
            {servers, [
                [
                    %%{dns_name, {{ rmq_http[0].dns_cache_name }}},
                    {host, "{{ rmq_http[0].host }}"},
                    {port, {{ rmq_http[0].port }}},
                    {username, <<"{{ rmq_http[0].user }}">>},
                    {password, <<"{{ rmq_http[0].pass }}">>},
                    {vhost, <<"{{ rmq_vhost }}">>}
                ]
            ]},
            {connections_per_queue, 1},
            {channels_per_connection, 1},
            {messages_prefetch_size_per_channel, 50}
        ]}
    ]},
{% if enigma_is_enabled == "true" %}
    {enigma, [
        {is_enabled, {{ enigma_is_enabled }}},
        {private_key_id, "{{ enigma_private_key_id }}"},
        {key_manager_host, "{{ enigma_key_manager_host }}"},

        {client_cert, "{{ enigma_client_cert }}"},
        {client_key, "{{ enigma_client_key }}"},
        {ca_cert, "{{ enigma_ca_cert }}"},

        {rotors_pool, [
            {min_size, 5},
            {max_size, 5},
            {start_size, 5}
        ]}
    ]},
{% else %}
    {enigma, [
        {is_enabled, {{ enigma_is_enabled }}}
    ]},
{% endif %}

    %% corezoid_limits application
    {corezoid_limits, [
        {pgsql, [
            {host, "{{ db_main.host }}"},
            {user, "{{ db_main.user }}"},
            {dbname, "limits"},
            {password, "{{ db_main.pass }}"},
            {min_size, 1},
            {max_size, 2},
            {start_size, 1}
        ]}
    ]}

].
