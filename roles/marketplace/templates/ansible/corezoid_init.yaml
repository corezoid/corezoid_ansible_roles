- hosts: localhost
  gather_facts: true

  vars:
    proto: https
    nginx_limits: {
      't2.medium': 'fifteen',
      't2.large': 'twentyfive',
      'c4.xlarge': 'fifty',
      'c4.2xlarge': 'hundredten',
      'c4.4xlarge': 'hundredforty',
      'c5.large': 'fifty',
      'c5.xlarge': 'fifty',
      'c5.2xlarge': 'hundredten',
      'c5.4xlarge': 'hundredforty'
    }
    nginx_limit_req: 15

  handlers:
    #be careful: handlers will always run in order they are defined, not in order they are listed in notify:
    - name: restart rabbitmq-server
      service:
        name: rabbitmq-server
        state: restarted
      listen: "restart rabbitmq-server"

    - name: restart conf_agent_server
      service:
        name: conf_agent_server
        state: restarted
      listen: "restart conf_agent_server"

    - name: restart corezoid_limits
      service:
        name: corezoid_limits
        state: restarted
      listen: "restart corezoid_limits"

    - name: restart capi
      service:
        name: capi
        state: restarted
      listen: "restart capi"

    - name: restart conveyor_api_multipart
      service:
        name: conveyor_api_multipart
        state: restarted
      listen: "restart conveyor_api_multipart"

    - name: restart worker
      service:
        name: worker
        state: restarted
      listen: "restart worker"

    - name: restart usercode
      service:
        name: usercode
        state: restarted
      listen: "restart usercode"

    - name: restart http-worker
      service:
        name: http-worker
        state: restarted
      listen: "restart http-worker"

    - name: restart nginx
      service:
        name: nginx
        state: restarted
      listen: "restart nginx"

  tasks:
    - name: Set hostname
      hostname:
        name: "corezoid"

    - name: add useradd file
      template: src=files/useradd.j2 dest=/etc/default/useradd owner=root group=root mode=0655

    - name: restart rabbitmq-server
      service:
        name: rabbitmq-server
        state: restarted

    - name: get ip from capi.conf
      shell: 'cat /ebsmnt/conf/capi.config | grep {site | grep -Eoh "\"(.)*\"" | sed ''s/\"//g'' | uniq'
      register: capi_ip

    - name: ip in capi.conf
      debug: var=capi_ip.stdout


#    - name: get public ip from Amazon meta-data
#      shell: wget -S -q -O - http://169.254.169.254/latest/meta-data/public-ipv4 2>/dev/null
#      register: public_ip
#      ignore_errors: yes
#      when:
#        - ansible_distribution == "Amazon"

    # - name: get local ip
    #   shell: /usr/sbin/ip addr show | grep -o "inet [0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" | grep -o "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" | grep -v "127.0.0.1" | head -1
    #   register: local_ip

    # - name: get public_ip ip
    #   shell: curl ifconfig.me
    #   register: public_ip

    - name: get public ip from GoogleMetadata
      shell: "wget -S -q -O - http://metadata/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip --header 'Metadata-Flavor: Google' 2> /dev/null"
      register: public_ip
      ignore_errors: yes
      when:
        - ansible_distribution == "CentOS" or ansible_distribution == "RedHat" or ansible_distribution == "OracleLinux"
        - ansible_distribution_major_version == "7"

    # - name: get public ip from DigitalOcean
    #   shell: "wget -S -q -O - http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address"
    #   register: public_ip
    #   ignore_errors: yes
    #   when:
    #     - ansible_distribution == "CentOS" or ansible_distribution == "RedHat" or ansible_distribution == "OracleLinux"
    #     - ansible_distribution_major_version == "7"

    # - name: get public ip from Azure
    #   shell: 'curl -H Metadata:true "http://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress?api-version=2017-08-01&format=text"'
    #   register: public_ip
    #   ignore_errors: yes
    #   when:
    #     - ansible_distribution == "CentOS" or ansible_distribution == "RedHat" or ansible_distribution == "OracleLinux"
    #     - ansible_distribution_major_version == "7"

    # - name: get public ip from Alibaba
    #   shell: "wget -S -q -O - http://100.100.100.200/latest/meta-data/eipv4"
    #   register: public_ip
    #   ignore_errors: yes
    #   when:
    #     - ansible_distribution == "CentOS" or ansible_distribution == "RedHat" or ansible_distribution == "OracleLinux"
    #     - ansible_distribution_major_version == "7"

#    - name: Check if health_check_server is already installed
#      yum:
#        list: health_check_server
#      register: health_check_server

#    - name: get local ip from meta-data if Amazon
#      shell: wget -S -q -O - http://169.254.169.254/latest/meta-data/local-ipv4 2>/dev/null
#      register: local_ip
#      when:
#        - ansible_distribution == "Amazon"

    - name: get local ip
#      debug: var=ansible_default_ipv4.address
#      register: local_ip
      set_fact: local_ip={{ ansible_default_ipv4.address }}
      when:
        - ansible_distribution == "CentOS" or ansible_distribution == "RedHat" or ansible_distribution == "OracleLinux"
        - ansible_distribution_major_version == "7"

    - name: show local_ip
      debug: var=local_ip.stdout

    - name: show public_ip
      debug: var=public_ip.stdout


#    - name: try assign public
#     set_fact: address={{ public_ip.stdout }}
#      when:
#       - public_ip != ""
#       - ansible_distribution == "Amazon"

    - name: try assign public ip
      set_fact: address={{ public_ip.stdout }}
      when:
        - public_ip.stdout != ""
        - ansible_distribution == "CentOS" or ansible_distribution == "RedHat" or ansible_distribution == "OracleLinux" or ansible_distribution == "Amazon"
        - ansible_distribution_major_version == "7" or ansible_distribution_major_version == "2"

    - name: try assign local ip
      set_fact: address={{ local_ip.stdout}}
      when:
        - public_ip.stdout == ""
        - ansible_distribution == "CentOS" or ansible_distribution == "RedHat" or ansible_distribution == "OracleLinux" or ansible_distribution == "Amazon"
        - ansible_distribution_major_version == "7" or ansible_distribution_major_version == "2"

    - name: assignet ip is
      debug: var=address

    # - name: get instance-type from meta-data
    #   shell: curl -s http://169.254.169.254/latest/meta-data/instance-type
    #   register: instance_type
    #   when:
    #     - ansible_distribution == "Amazon"

    # - name: get accountId from meta-data
    #   shell: wget -S -q -O - http://169.254.169.254/latest/dynamic/instance-identity/document/ 2>/dev/null
    #   register: instance_doc
    #   when:
    #     - ansible_distribution == "Amazon"

    # - name: generate import-data
    #   template: src=files/import-data.j2 dest=/usr/local/bin/import-data owner=root group=root mode=755
    #   when:
    #     - ansible_distribution == "Amazon"

    # - name: generate export-data
    #   template: src=files/export-data.j2 dest=/usr/local/bin/export-data owner=root group=root mode=755
    #   when:
    #     - ansible_distribution == "Amazon"

    - name: adjusting host in conf_agent_server.config
      lineinfile: dest=/ebsmnt/conf/conf_agent_server.config regexp="api host" line="        {host, \"https://{{ address }}\"}   % corezoid api host"
      when:
        - address != capi_ip.stdout
        - address != ""

    - name: adjusting api_host in capi.config
      lineinfile: dest=/ebsmnt/conf/capi.config regexp="api_host" line="        {api_host, \"https://{{ address }}/api\"},"
      when:
        - address != capi_ip.stdout
        - address != ""

    - name: adjusting admin_url1 in capi.config
      lineinfile: dest=/ebsmnt/conf/capi.config regexp="admin_url1" line="        {admin_url1, \"https://{{ address }}\"},"
      when:
        - address != capi_ip.stdout
        - address != ""

    - name: adjusting admin_url2 in capi.config
      lineinfile: dest=/ebsmnt/conf/capi.config regexp="admin_url2" line="        {admin_url2, \"https://{{ address }}\"},"
      when:
        - address != capi_ip.stdout
        - address != ""

    - name: adjusting ip in capi.config
      shell: "sed -i s/{{ capi_ip.stdout }}/{{ address }}/ /ebsmnt/conf/capi.config"
      when:
        - address != capi_ip.stdout
        - address != ""

    - name: adjusting ip in conveyor_api_multipart.config
      shell: "sed -i s/{{ capi_ip.stdout }}/{{ address }}/ /ebsmnt/conf/conveyor_api_multipart.config"
      when:
        - address != capi_ip.stdout
        - address != ""

#    - name: adjusting ip in health_check_server.config
#      shell: "sed -i s/{{ capi_ip.stdout }}/{{ address }}/ /ebsmnt/conf/health_check_server.config"
#      ignore_errors: yes
#      when:
#        - address != capi_ip.stdout
#        - address != ""
#        - health_check_server.results[0].yumstate == 'installed'



    - name: adjusting ip in worker.config
      shell: "sed -i s/{{ capi_ip.stdout }}/{{ address }}/ /ebsmnt/conf/worker.config"
      notify:
        - "restart rabbitmq-server"
        - "restart conf_agent_server"
        - "restart corezoid_limits"
        - "restart capi"
        - "restart conveyor_api_multipart"
        - "restart worker"
        - "restart usercode"
        - "restart http-worker"
        - "restart nginx"
      when:
        - address != capi_ip.stdout
        - address != ""

    - name: reset for apply main_domain
      shell: "monit restart capi"
      when:
        - address != capi_ip.stdout
        - address != ""
