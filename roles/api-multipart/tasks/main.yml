---
# Set service name as a fact for consistent usage
- name: Set service name variable
  set_fact:
    service_name: "conveyor_api_multipart"
    systemd_service_dir: "/etc/systemd/system/conveyor_api_multipart.service.d"
  tags:
    - always

# This task removes all cached package data to prevent installation issues
- name: Yum clean all
  command: yum clean all
  #  args:
  #    warn: false
  tags:
    - api-multipart-all
    - api-multipart-install

# Install the conveyor_api_multipart application package
# This task installs or updates the application from the AWS Corezoid repository
- name: Install conveyor_api_multipart app
  yum:
    name: "{{ service_name }}-{{ corezoid_release_app_version.mult }}"
    state: present
    update_cache: yes
    disablerepo: "*"
    enablerepo: "aws-corezoid"
  tags:
    - api-multipart-all
    - api-multipart-install

# Create all required directories in a single task using a loop
- name: Create application directories
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    state: directory
    mode: "{{ item.mode }}"
    recurse: "{{ item.recurse }}"
  loop:
    - { path: "{{ api_mult_file_f3_path_to_dir }}", owner: "{{ app_user }}", group: "{{ app_user }}", mode: "0755", recurse: yes }
    - { path: "{{ api_mult_file_f3_path_to_dir }}/versions", owner: "{{ app_user }}", group: "{{ app_user }}", mode: "0755", recurse: yes }
    - { path: "{{ mult_tmp_dir }}", owner: "{{ app_user }}", group: "{{ app_user }}", mode: "0755", recurse: no }
    - { path: "{{ top_dir }}/erlang/{{ service_name }}/log", owner: "{{ app_user }}", group: "{{ app_user }}", mode: "0755", recurse: no }
    - { path: "{{ conf_dir }}", owner: "root", group: "root", mode: "0755", recurse: no }
    - { path: "{{ top_dir }}/erlang/{{ service_name }}", owner: "{{ app_user }}", group: "{{ app_user }}", mode: "0700", recurse: yes }
  tags:
    - api-multipart-all
    - api-multipart-env
    - api-multipart-install
    - api-multipart-config

# Generate application configuration from template
# Creates the main configuration file using provided template
- name: Create conveyor_api_multipart_config
  template: src=templates/{{ corezoid_release }}-{{ service_name }}.config.j2 dest={{ api_mult_config }} owner={{ app_user }} group={{ app_user }} mode=0500
  tags:
    - api-multipart-all
    - api-multipart-config
    - api-multipart-config-file


# Enable and start application service
# Ensures the service starts automatically on boot and is running
- name: Enable conveyor_api_multipart to survive reboot
  service:
    name: "{{ service_name }}"
    enabled: yes
    state: started
  tags:
    - api-multipart-all

# Create Monit monitoring configuration
# Sets up monitoring for the application using Monit
- name: Create monit file
  template:
    src: "templates/{{ item }}.monit.j2"
    dest: "/etc/monit.d/{{ item }}"
    owner: root
    group: root
    mode: 0600
  with_items:
    - conveyor_api_multipart
  register: monit_file
  tags:
    - api-multipart-all
    - api-multipart-monit

# Reload Monit configuration if changed
# Ensures monitoring configuration changes take effect
- name: Reload monit if config file changed
  service:
    name: monit
    state: reloaded
  when: monit_file.changed
  tags:
    - capi-all
    - capi-app
    - capi-monit