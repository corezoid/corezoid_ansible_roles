---
#-------------corezoid_api_sync-------------#

# Set service name as a fact for consistent usage
- name: Set service name variable
  set_fact:
    service_name: "corezoid_api_sync"
  tags:
    - always

# Clean YUM cache to ensure fresh package metadata
# Removes all cached package data to prevent installation issues
- name: Yum clean all
  command: yum clean all
  tags:
    - corezoid_api_sync-all
    - corezoid_api_sync-install
    - corezoid_api_sync-nginx-setup
    - corezoid_api_sync-nginx-package

# Install Corezoid API Sync package
# Installs or updates the sync API package from AWS Corezoid repository with specific version
- name: Install packages
  yum:
    name: "{{ service_name }}-{{ corezoid_release_app_version.sync_api }}"
    state: present
    update_cache: yes
    disablerepo: "*"
    enablerepo: "aws-corezoid"
  tags:
    - corezoid_api_sync-all
    - corezoid_api_sync-app
    - corezoid_api_sync-install

# Create all required directories in a single task using a loop
- name: Create application directories
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    state: directory
    mode: "{{ item.mode }}"
    recurse: "{{ item.recurse }}"
  loop:
    - { path: "{{ top_dir }}/erlang/{{ service_name }}/log", owner: "{{ app_user }}", group: "{{ app_user }}", mode: "0700", recurse: no }
    - { path: "{{ conf_dir }}", owner: "{{ app_user }}", group: "{{ app_user }}", mode: "0500", recurse: no }
    - { path: "{{ top_dir }}/erlang/{{ service_name }}", owner: "{{ app_user }}", group: "{{ app_user }}", mode: "0700", recurse: yes }
  tags:
    - corezoid_api_sync-all
    - corezoid_api_sync-install
    - corezoid_api_sync-config

# Generate API Sync configuration
# Creates the main configuration file from template
#If there is an error, please add it
# with_items:
#    - corezoid_api_sync
- name: Create corezoid_api_sync.config file
  template: src=templates/{{ corezoid_release }}-{{ service_name }}.config.j2 dest={{ corezoid_api_sync.config }} owner={{ app_user }} group={{ app_user }} mode=0500
  tags:
    - corezoid_api_sync-all
    - corezoid_api_sync-app
    - corezoid_api_sync-config
    - corezoid_api_sync-config-file

# Enable and start API Sync service
# Ensures the service starts automatically on boot and is running
- name: Enable corezoid_api_sync to survive reboot
  service:
    name: "{{ service_name }}"
    enabled: yes
    state: started
  tags:
    - corezoid_api_sync-all
    - corezoid_api_sync-app
    - corezoid_api_sync-start

# Create Monit monitoring configuration
# Sets up monitoring for the API Sync service
- name: Create monit file
  template: src=templates/{{ item }}.monit.j2 dest=/etc/monit.d/{{ item }} owner=root group=root mode=0600
  with_items:
    - corezoid_api_sync
  register: monit_file
  tags:
    - corezoid_api_sync-all
    - corezoid_api_sync-app
    - corezoid_api_sync-monit

# Reload Monit configuration
# Applies any changes to the Monit monitoring setup
- name: Reload monit if config file changed
  service:
    name: monit
    state: reloaded
  when: monit_file.changed
  tags:
    - corezoid_api_sync-all
    - corezoid_api_sync-app
    - corezoid_api_sync-monit

#----------------NGINX-------------------

# Install Nginx web server and configure it for API Sync
- name: Install and configure Nginx
  block:
    # Install Nginx web server
    # Sets up the Nginx package from default repositories
    - name: Install nGinx package
      yum:
        name: nginx
        state: present
        update_cache: yes
      tags:
        - corezoid_api_sync-nginx-package

    # Create main Nginx configuration for Sync API
    # Sets up the primary Nginx configuration for the Sync API service
    - name: Create nGinx configurations
      template:
        src: "templates/{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
      loop:
        - { src: "{{ corezoid_release }}-01_syncapi.conf.j2", dest: "/etc/nginx/conf.d/syncapi-corezoid.conf", owner: "root", group: "root", mode: "0644" }
        - { src: "upstream.conf.j2", dest: "/etc/nginx/conf.d/upstream-syncapi.conf", owner: "root", group: "root", mode: "0644" }
        - { src: "status.conf.j2", dest: "/etc/nginx/conf.d/status.conf", owner: "root", group: "root", mode: "0644" }
        - { src: "nginx.conf.j2", dest: "/etc/nginx/nginx.conf", owner: "root", group: "root", mode: "0600" }
      tags:
        - corezoid_api_sync-nginx-configs

    # Setup SSL for Nginx
    - name: Setup SSL for Nginx
      block:
        # Create SSL directory structure
        - name: Create nGinx ssl dir
          file:
            path: "{{ nginx_ssl_dir }}"
            owner: root
            group: root
            state: directory
            mode: 0755

        # Deploy SSL certificate
        - name: Copy SSL certificate data
          copy:
            content: "{{ nginx_ssl_content }}"
            dest: "{{ nginx_ssl_filename }}"
            owner: "root"
            group: "root"
            mode: "0600"

        # Configure SSL certificate settings
        - name: Create nGinx ssl conf
          template:
            src: "templates/cert-corezoid.j2"
            dest: "{{ nginx_ssl_dir }}/cert-corezoid"
            owner: root
            group: root
            mode: 0600

        # Create SSL certificate symlinks
        - name: Create nGinx ssl links
          file:
            src: "{{ nginx_ssl_filename }}"
            dest: "{{ nginx_ssl_dir }}/{{ item }}"
            state: link
          with_items:
            - "corezoid.crt"
            - "corezoid.key"
      tags:
        - corezoid_api_sync-nginx-setup-ssl

    # Enable and start Nginx service
    # Ensures Nginx starts on boot and is running
    - name: Enable nGinx to survive reboot
      service:
        name: nginx
        state: started
        enabled: yes
      tags:
        - corezoid_api_sync-nginx-system
  tags:
    - corezoid_api_sync-all
    - corezoid_api_sync-nginx-setup

#----------------NGINX-------------------