---
# tasks file for http-worker
# Set service name as a fact for consistent usage
- name: Set service name variable
  set_fact:
    service_name: "http-worker"
    service_config_name: "http_worker"
  tags:
    - always

# Clean YUM cache to ensure fresh package metadata
# Removes all cached package data to prevent installation issues
- name: Yum clean all
  command: yum clean all
  tags:
    - http-worker-all
    - http-worker-install

# Install HTTP Worker application package
# Installs or updates the http-worker package from AWS Corezoid repository with specific version
- name: Install http-worker app
  yum:
    name: "{{ service_name }}-{{http_worker.version}}"
    state: present
    update_cache: yes
    disablerepo: "*"
    enablerepo: "aws-corezoid"
  tags:
    - http-worker-all
    - http-worker-install

# Create all required directories in a single task using a loop
- name: Create application directories
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    state: directory
    mode: "{{ item.mode }}"
    recurse: "{{ item.recurse }}"
  loop:
    - { path: "{{ top_dir }}/erlang/{{ service_name }}/log", owner: "{{ app_user }}", group: "{{ app_user }}", mode: "0755", recurse: no }
    - { path: "{{ conf_dir }}", owner: "root", group: "root", mode: "0755", recurse: no }
    - { path: "{{ top_dir }}/erlang/{{ service_name }}", owner: "{{ app_user }}", group: "{{ app_user }}", mode: "0700", recurse: yes }
  tags:
    - http-worker-all
    - http-worker-install
    - http-worker-config

# Generate HTTP Worker configuration
# Creates the main configuration file using provided template
- name: Create http_worker.config
  template: src=templates/{{ corezoid_release }}-{{ service_config_name }}.config.j2 dest={{ http_worker.config }} owner={{ app_user }} group={{ app_user }} mode=0500
  tags:
    - http-worker-all
    - http-worker-config
    - http-worker-config-file

# Enable and start HTTP Worker service
# Ensures the service starts automatically on boot and is running
- name: Enable http-worker to survive reboot
  service:
    name: "{{ service_name }}"
    enabled: yes
    state: started
  tags:
    - http-worker-all
    - http-worker-start

# Create new Monit monitoring configuration
# Sets up monitoring for the HTTP Worker service
- name: Create monit file
  template: src=templates/{{ item }}.monit.j2 dest=/etc/monit.d/{{ item }} owner=root group=root mode=0600
  with_items:
    - http-worker
  register: monit_file
  tags:
    - http-worker-all
    - http-worker-monit

# Reload Monit configuration if changed
# Ensures monitoring configuration changes take effect
- name: Reload monit if config file changed
  service:
    name: monit
    state: reloaded
  when: monit_file.changed
  tags:
    - http-worker-all
    - http-worker-monit