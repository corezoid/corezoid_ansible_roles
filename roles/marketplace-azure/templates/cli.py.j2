#!/usr/bin/env python
# -*- coding: utf-8 -*-
import cmd
import os

class Cli(cmd.Cmd):

    def __init__(self):
        cmd.Cmd.__init__(self)
        self.prompt = "> "
        self.intro  = "Welcome!\nPrint 'help'"
        self.doc_header ="Available commands (for help by command print 'help _command_')"

    def do_add_key_for_support(self, args):
        """add_key_for_support - You are granting access for technical support of Corezoid Team."""
        os.system("sudo /usr/local/bin/add_support_access add_key")

    def do_del_key_of_support(self, args):
        """del_key_of_support - You are revoking access from technical support."""
        os.system("sudo /usr/local/bin/add_support_access del_key")

    def do_reset_password(self, args):
        """reset_password - Emergency reset password"""
        os.system("sudo /usr/local/bin/reset_password")
{% if marketplace_data.cloud == "Amazon" %}
    def do_export_data(self, args):
        """export_data - start export"""
        os.system("sudo /usr/local/bin/export-data")

    def do_import_data(self, args):
        """import-data - start import"""
        os.system("sudo /usr/local/bin/import-data")

    def do_s3_config(self, args):
        """s3_config - Set up your Access and Secret Access Keys, default region name that will be used in the migration process. For migration/backup process you should prepare S3 bucket with name 'corezoid-backups-YOUR_ACCOUNT_ID' and with privileges: s3:GetObject, s3:PutObject for objects inside bucket and s3:ListBucket for that bucket"""
        os.system("sudo aws configure")
{% endif%}
    def do_monit_status(self, args):
        """monit_status - Show status of all controlled processes"""
        os.system("sudo -u root monit status")

    def do_mq_status(self, args):
        """mq_status - rabbitmqctl status"""
        os.system("sudo rabbitmqctl status")

    def do_show_top(self, args):
        """show_top - It equals top linux command"""
        os.system("top")

    def do_show_mem(self, args):
        """show_mem - Memory usage"""
        os.system("free")

    def do_show_disk(self, args):
        """show_disk - Disk usage"""
        os.system("df -h")

    def do_dmesg(self, args):
        """dmesg - It equals dmesg linux command"""
        os.system("dmesg")

    def do_version (self, args):
        """version - Show versions components"""
        os.system("rpm -qa | egrep \"corezoid-web-admin|capi|worker|http-worker|usercode|conveyor_api_multipart|health_check_server|conf_agent_server|conf-agent-client|corezoid_limits|single_account|single-account-static\" | sort")

#    def do_license (self, args):
#        """license - Get license start date"""
##        os.system("date -d@`license_server license start` '+%Y-%m-%d %H:%M:%S' && date -d@`license_server license expire` '+%Y-%m-%d %H:%M:%S'")
#        os.system("cat /tmp/license-start /tmp/license-end")

    def do_db_check_dbsize(self, args):
        """db_check_dbsize - Check DB size"""
        os.system("su postgres /postgresqldata/pgsql/scripts/maintenance.sh dbsize")

    def do_db_check_bloat(self, args):
        """db_check_bloat - Check bloat tables on DB"""
        os.system("su postgres /postgresqldata/pgsql/scripts/maintenance.sh check_bloat")

    def do_db_top_tabels(self, args):
        """db_top_tabels - Check TOP Tables in all cp* DB"""
        os.system("su postgres /postgresqldata/pgsql/scripts/maintenance.sh top_db")

    def do_db_repack_shards(self, args):
        """db_repack_shards - Repack shards in your cp* DB"""
        os.system("su postgres /postgresqldata/pgsql/scripts/maintenance.sh repack_shards")

    def do_db_truncate_tasks(self, args):
        """db_truncate_tasks - TRUNCATE tasks_archive and tasks_history"""
        os.system("su postgres /postgresqldata/pgsql/scripts/maintenance.sh truncate_all")

    def do_db_top_proc_by_tacts(self, args):
        """db_top_proc_by_tacts - Get TOP processes by tacts"""
        os.system("su postgres /postgresqldata/pgsql/scripts/maintenance.sh top_proc_by_tacts")
    def do_db_top_proc_by_traff(self, args):
        """db_top_proc_by_traff - Get TOP processes by traffic"""
        os.system("su postgres /postgresqldata/pgsql/scripts/maintenance.sh top_proc_by_traff")
    def do_db_top_proc_by_opers(self, args):
        """db_top_proc_by_opers - Get TOP processes by operations"""
        os.system("su postgres /postgresqldata/pgsql/scripts/maintenance.sh top_proc_by_opers")

#    def do_ssl_install(self, args):
#        """ssl_install - Install Let's Encrypt or your SSL certificate"""
#        os.system("sudo bash /usr/local/bin/ssl.sh")

    def do_fix_domain(self, args):
        """fix_domain - You can change the IP or domain for the WEB"""
        os.system("sudo bash /root/fix_domain_crz.sh")

    def do_show_queues(self, args):
        """show_all_queues - Show all queues in RabbitMQ."""
        os.system("sudo rabbitmqctl list_queues -p /conveyor")

    def default(self, line):
        print "This command does not exist."

    def emptyline(self):
        pass

if __name__ == "__main__":
    cli = Cli()
    try:
        cli.cmdloop()
    except KeyboardInterrupt:
        print "exit..."
