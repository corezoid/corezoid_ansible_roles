---
- name: install ansible
  yum: name={{ item }} state=latest update_cache=yes
  with_items:
    - ansible
    - firewalld
    - jq

- name: add files for client's user
  template: src=templates/{{ item }}.j2 dest=/usr/local/bin/{{ item }} owner=root group=root mode=0655
  with_items:
    - "cli.py"
    - "add_support_access"
    - "ssl.sh"
  tags:
    - users_files

- name: add files for client's user
  template: src=templates/{{ item }} dest=/usr/local/bin/{{ item }} owner=root group=root mode=0655
  with_items:
    - "reset_password"
    - "export-data"
    - "import-data"


- name: add files for client's user
  template: src=templates/{{ item }} dest=/usr/local/bin/{{ item }} owner=root group=root mode=0655
  when: marketplace_data.cloud == "Amazon"
  with_items:
    - "export-data"
    - "import-data"

- name: add files for client's user
  template: src=templates/{{ item }} dest=/postgresqldata/pgsql/scripts/{{ item }} owner=postgres group=root mode=0655
  with_items:
    - "maintenance.sh"
  tags:
    - users_files

- name: copy ansible playbook for user init
  copy:
    src: templates/ansible
    dest: /opt
  tags: renew

- name: add fix domain script
  copy:
    src: templates/ansible/files/fix_domain_crz.sh
    dest: /root/
  tags: renew

- name: Daily update license status with crontab
  cron:
    special_time: daily
    name: "Daily update license start status with crontab"
    user: "root"
    # job: "{{ top_dir }}/erlang/capi/erts-8.3.5.4/bin/escript \"{{ license_file_path }}/{{ license_file_name }}\" check \"[{time_to_start, []}].\""
    job: "echo -n \"License start: \" > /tmp/license-start && date -d@$({{ top_dir }}/erlang/capi/erts-8.3.5.4/bin/escript \"{{ license_file_path }}/{{ license_file_name }}\" check \"[{time_to_start, []}].\" | grep -o '[[:digit:]]*') '+%Y-%b-%d %H:%M:%S' >> /tmp/license-start"

- name: Daily update license status with crontab
  cron:
    special_time: daily
    name: "Daily update license expire status with crontab"
    user: "root"
    # job: "{{ top_dir }}/erlang/capi/erts-8.3.5.4/bin/escript \"{{ license_file_path }}/{{ license_file_name }}\" check \"[{time_to_expire, []}].\""
    job: "echo -n \"License expire: \" > /tmp/license-end && date -d@$({{ top_dir }}/erlang/capi/erts-8.3.5.4/bin/escript \"{{ license_file_path }}/{{ license_file_name }}\" check \"[{time_to_expire, []}].\" | grep -o '[[:digit:]]*') '+%Y-%b-%d %H:%M:%S' >> /tmp/license-end"

- name: Change hostname
  cron:
    special_time: reboot
    name: "Change hostname or rabbitmq-server can't start correct"
    user: "root"
    job: "hostname corezoid"

- name: Delete mnesia folder
  cron:
    special_time: reboot
    name: "Delete mnesia folder"
    user: "root"
    job: "rm -fr /ebsmnt/erlang/capi/mnesia"

- name: Daily init core system
  cron:
    special_time: reboot
    name: "corezoid_init with crontab"
    user: "root"
    job: "cd /opt/ansible; /bin/ansible-playbook -i hosts corezoid_init.yaml  2>&1 > /tmp/corezoid_init.log"

- name: Daily init user admin@corezoid.loc passwd
  cron:
    special_time: reboot
    name: "corezoid_user with crontab"
    user: "root"
    job: "cd /opt/ansible; /bin/ansible-playbook -i hosts corezoid_user_init.yaml  2>&1 > /tmp/corezoid_user_init.log"

- name: add ansible filter_plugins
  lineinfile:
    path: /root/.bashrc
    line: 'export ANSIBLE_FILTER_PLUGIN="/opt/ansible/filter_plugins"'

- name: add corezoid in /etc/hosts
  lineinfile:
    path: /etc/hosts
    line: '127.0.0.1 corezoid'

- name: Add support user
  user:
    name: support
    comment: "Support user"
    shell: /bin/bash
  tags:
    - add_supper

- name: Ensure group "support" exists
  group: name=support state=present
  tags:
    - add_supper

- name: add support in sudoers
  lineinfile:
    path: /etc/sudoers
    line: 'support	ALL=(ALL)	NOPASSWD : ALL'
  tags:
    - add_supper

- name: Create .ssh support
  file: path=/home/support/.ssh owner=support group=support state=directory mode=0700
  tags:
    - add_supper

- name: Configure firewalld
  raw: "{{ item }}"
  with_items:
    - "systemctl enable firewalld"
    - "systemctl start firewalld"
    - "chkconfig rabbitmq-server on"
#    - "firewall-cmd --permanent --zone=public --add-port=22/tcp"
    - "firewall-cmd --permanent --zone=public --add-port=80/tcp"
    - "firewall-cmd --permanent --zone=public --add-port=443/tcp"
    - "firewall-cmd --reload"
  tags:
    - fw

- name: yum-clean-metadata
  command: yum clean metadata
  args:
    warn: no

#- name: upgrade all packages
#  yum:
#    name: '*'
#    exclude: worker*,python3*
#    state: latest
#
#
#
- name: clean pid for gen new passwd
  shell: "rm -rf /tmp/pwd.pid"

- name: clean root authorized_keys
  shell: "rm -rf /root/.ssh/authorized_keys"

- name: clean ec2-user authorized_keys
  shell: "rm -rf /home/ec2-user/.ssh/authorized_keys"
  when:
    - ansible_distribution == "Amazon"

- name: clean support authorized_keys
  shell: "rm -rf /home/support/.ssh/authorized_keys"

- name: add shell for ec2-user
  lineinfile:
    regexp: '^ec2-user'
    path: /etc/passwd
    line: 'ec2-user:x:1000:1000:EC2 Default User:/home/ec2-user:/usr/local/bin/cli.py'
  when:
    - ansible_distribution == "Amazon"

- name: add useradd file
  template: src=templates/{{ item }}.j2 dest=/etc/default/{{ item }} owner=root group=root mode=0655
  with_items:
    - "useradd"
  tags:
    - marketplace-useradd


- name: add instance_configs file
  template: src=templates/{{ item }}.j2 dest=/etc/default/{{ item }} owner=root group=root mode=0655
  with_items:
    - "instance_configs.cfg"
  when:
    - marketplace_data.cloud == "Google"
  tags:
    - marketplace-google

- name: clean some shit
  shell: "rm -rf /tmp/* /var/tmp/*"

- name: clean all app logs
  shell: "rm -f /ebsmnt/erlang/*/log/*"

- name: clean yum cache
  shell: "yum clean all"

- name: clean rotaed logs
  shell: "rm -rf /var/log/*.gz /var/log/*.[0-9]"

- name: clean lastlogon
  shell: " > /var/log/lastlog; > /var/log/wtmp"

- name: clean root history
  shell: "history -c"

- name: clean root bash_history
  shell: "rm -rf /root/.bash_history"
#
#
#- name: FINISH
#  shell: "shutdown -r now"


#  553829566451 mw
#  553829566451553829566451
