[
  {cce, [
    {cce_id, <<"cce-{{ ansible_default_ipv4.address }}">>},
    {db_host, "{{ db_main.host }}"},
    {db_port, 5432},
    {db_user, "{{ db_main.user }}"},
    {db_pass, "{{ db_main.pass }}"},
    {db_name, "cce"},

    {cce_process_data_queue, <<"cce.process_data_1">>},
    {cce_process_data_exchange, <<"cce">>},
    {cce_process_data_routing_key, <<"cce.process_data_1">>},

    {code_execution_track, true},
    {code_execution_timelimit, 1},

    {zabbix, [
      {send_interval, 5},
      {disabled, true}
    ]},

    {consumer_process_data, [
      {servers, [[
        {server, {'{{ rmq_host }}', 5672}},
        {user, <<"{{ rmq_user }}">>},
        {password, <<"{{ rmq_user_pass }}">>},
        {vhost, <<"/conveyor">>}
      ]]}
    ]},

    {consumer_code_ctl, [
      {servers, [[
        {server, {'{{ rmq_host }}', 5672}},
        {user, <<"{{ rmq_user }}">>},
        {password, <<"{{ rmq_user_pass }}">>},
        {vhost, <<"/conveyor">>}
      ]]}
    ]},

    {consumer_code_unloader, [
      {servers, [[
        {server, {'{{ rmq_host }}', 5672}},
        {user, <<"{{ rmq_user }}">>},
        {password, <<"{{ rmq_user_pass }}">>},
        {vhost, <<"/conveyor">>}
      ]]}
    ]},

	%% Serving for returning messages to worker
	{publish_default, [
		{servers, [[
			{server, {'{{ rmq_host }}', 5672}},
			{user, <<"{{ rmq_user }}">>},
			{password, <<"{{ rmq_user_pass }}">>},
			{vhost, <<"/conveyor">>}
		]]},
	{min_size, 1},
	{max_size, 50},
	{start_size, 1}
	]}
]},

	{zabbix_sender, [
		{zabbix_host, "{{ rmq_host }}"},
		{zabbix_port, 10051},
		{nodename, "localhost"}
	]},

	%%   used for serving compile requests and CTL requests
	{rmql, [
		{survive, true},
		{amqp_props, [
			{host, "{{ rmq_host }}"},
			{port, 5672},
			{vhost, <<"/conveyor">>},
			{username, <<"{{ rmq_user }}">>},
			{password, <<"{{ rmq_user_pass }}">>},
			{heartbeat, 60}
		]}
	]},

	{lager, [
        %% What handlers to install with what arguments (wrapped by middleman)
          {handlers, [
		%% {lager_console_backend, info},
                {lager_file_backend, [
                {file, "log/error.log"}, {level, error}, {size, 10485760}, {date, "$D0"}, {count, 5}]},
                {lager_file_backend, [
                {file, "log/console.log"}, {level, info}, {size, 10485760}, {date, "$D0"}, {count, 5}]}
            ]},
            %% What colors to use with what log levels
            {colored, true},
            {colors, [
              {debug,     "\e[0;38m" },
              {info,      "\e[1;37m" },
              {notice,    "\e[1;36m" },
              {warning,   "\e[1;33m" },
              {error,     "\e[1;31m" },
              {critical,  "\e[1;35m" },
              {alert,     "\e[1;44m" },
              {emergency, "\e[1;41m" }

            ]},

            %% Whether to write a crash log, and where. Undefined means no crash logger.
            {crash_log, "log/crash.log"},
            %% Maximum size in bytes of events in the crash log - defaults to 65536
            {crash_log_msg_size, 65536},
            %% Maximum size of the crash log in bytes, before its rotated, set
            %% to 0 to disable rotation - default is 0
            {crash_log_size, 10485760},
            %% What time to rotate the crash log - default is no time
            %% rotation. See the README for a description of this format.
            {crash_log_date, "$D0"},
            %% Number of rotated crash logs to keep, 0 means keep only the
            %% current one - default is 0
            {crash_log_count, 5},
            %% Whether to redirect error_logger messages into lager - defaults to true
            {error_logger_redirect, true},
            %% How many messages per second to allow from error_logger before we start dropping them
            {error_logger_hwm, 100},
            %% How big the gen_event mailbox can get before it is switched into sync mode
            {async_threshold, 3200},
            %% Switch back to async mode, when gen_event mailbox size decrease from `async_threshold'
            %% to async_threshold - async_threshold_window
            {async_threshold_window, 3010}
        ]},

	{sasl, [{sasl_error_logger, false}]}
].
